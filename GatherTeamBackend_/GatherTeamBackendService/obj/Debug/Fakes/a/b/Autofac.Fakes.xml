<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac.Fakes</name>
    </assembly>
    <members>
        <member name="T:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData">
            <summary>Тип оболочки совместимости для Autofac.Builder.ConcreteReflectionActivatorData</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.#ctor(Autofac.Builder.ConcreteReflectionActivatorData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.Bind(Autofac.Builder.IConcreteActivatorData)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.ActivatorGet">
            <summary>Задает оболочка совместимости ConcreteReflectionActivatorData.get_Activator()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.ConstructorType">
            <summary>Задает оболочка совместимости ConcreteReflectionActivatorData.ConcreteReflectionActivatorData(Type implementer)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimConcreteReflectionActivatorData.AllInstances.ActivatorGet">
            <summary>Задает оболочка совместимости ConcreteReflectionActivatorData.get_Activator()</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimDynamicRegistrationStyle">
            <summary>Тип оболочки совместимости для Autofac.Builder.DynamicRegistrationStyle</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimDynamicRegistrationStyle.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimDynamicRegistrationStyle.#ctor(Autofac.Builder.DynamicRegistrationStyle)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimDynamicRegistrationStyle.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimDynamicRegistrationStyle.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimDynamicRegistrationStyle.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimDynamicRegistrationStyle.Constructor">
            <summary>Задает оболочка совместимости DynamicRegistrationStyle.DynamicRegistrationStyle()</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimDynamicRegistrationStyle.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimMetadataConfiguration`1">
            <summary>Тип оболочки совместимости для Autofac.Builder.MetadataConfiguration`1</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.#ctor(Autofac.Builder.MetadataConfiguration{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.ForOf1ExpressionOfFuncOfT0M0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,Autofac.Builder.MetadataConfiguration{`0}})">
            <summary>Задает оболочка совместимости MetadataConfiguration`1.For(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; propertyAccessor, !!0 value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.Constructor">
            <summary>Задает оболочка совместимости MetadataConfiguration`1.MetadataConfiguration`1()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.PropertiesGet">
            <summary>Задает оболочка совместимости MetadataConfiguration`1.get_Properties()</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.AllInstances.ForOf1ExpressionOfFuncOfT0M0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.MetadataConfiguration{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,Autofac.Builder.MetadataConfiguration{`0}})">
            <summary>Задает оболочка совместимости MetadataConfiguration`1.For(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; propertyAccessor, !!0 value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimMetadataConfiguration`1.AllInstances.PropertiesGet">
            <summary>Задает оболочка совместимости MetadataConfiguration`1.get_Properties()</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimReflectionActivatorData">
            <summary>Тип оболочки совместимости для Autofac.Builder.ReflectionActivatorData</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimReflectionActivatorData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimReflectionActivatorData.#ctor(Autofac.Builder.ReflectionActivatorData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimReflectionActivatorData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimReflectionActivatorData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.ConfiguredParametersGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ConfiguredParameters()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.ConfiguredPropertiesGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ConfiguredProperties()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.ConstructorFinderGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ConstructorFinder()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.ConstructorFinderSetIConstructorFinder">
            <summary>Задает оболочка совместимости ReflectionActivatorData.set_ConstructorFinder(IConstructorFinder value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.ConstructorSelectorGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ConstructorSelector()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.ConstructorSelectorSetIConstructorSelector">
            <summary>Задает оболочка совместимости ReflectionActivatorData.set_ConstructorSelector(IConstructorSelector value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.ConstructorType">
            <summary>Задает оболочка совместимости ReflectionActivatorData.ReflectionActivatorData(Type implementer)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.ImplementationTypeGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ImplementationType()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.ImplementationTypeSetType">
            <summary>Задает оболочка совместимости ReflectionActivatorData.set_ImplementationType(Type value)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimReflectionActivatorData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.AllInstances.ConfiguredParametersGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ConfiguredParameters()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.AllInstances.ConfiguredPropertiesGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ConfiguredProperties()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.AllInstances.ConstructorFinderGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ConstructorFinder()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.AllInstances.ConstructorFinderSetIConstructorFinder">
            <summary>Задает оболочка совместимости ReflectionActivatorData.set_ConstructorFinder(IConstructorFinder value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.AllInstances.ConstructorSelectorGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ConstructorSelector()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.AllInstances.ConstructorSelectorSetIConstructorSelector">
            <summary>Задает оболочка совместимости ReflectionActivatorData.set_ConstructorSelector(IConstructorSelector value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.AllInstances.ImplementationTypeGet">
            <summary>Задает оболочка совместимости ReflectionActivatorData.get_ImplementationType()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimReflectionActivatorData.AllInstances.ImplementationTypeSetType">
            <summary>Задает оболочка совместимости ReflectionActivatorData.set_ImplementationType(Type value)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimRegistrationBuilder">
            <summary>Тип оболочки совместимости для Autofac.Builder.RegistrationBuilder</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationBuilder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationBuilder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationBuilder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationBuilder.CreateRegistrationOf3IRegistrationBuilderOfM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.IComponentRegistration})">
            <summary>Задает оболочка совместимости RegistrationBuilder.CreateRegistration(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; builder)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationBuilder.ForDelegateOf1FuncOfIComponentContextIEnumerableOfParameterM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0},Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.SimpleActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationBuilder.ForDelegate(Func`3&lt;IComponentContext,IEnumerable`1&lt;Parameter&gt;,!!0&gt; delegate)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationBuilder.ForTypeOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationBuilder.ForType()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationBuilder.RegisterSingleComponentOf3IComponentRegistryIRegistrationBuilderOfM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Autofac.Core.IComponentRegistry,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationBuilder.RegisterSingleComponent(IComponentRegistry cr, IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; builder)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationBuilder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationBuilder.CreateRegistrationGuidRegistrationDataIInstanceActivatorIEnumerableOfService">
            <summary>Задает оболочка совместимости RegistrationBuilder.CreateRegistration(Guid id, RegistrationData data, IInstanceActivator activator, IEnumerable`1&lt;Service&gt; services)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationBuilder.CreateRegistrationGuidRegistrationDataIInstanceActivatorIEnumerableOfServiceIComponentRegistration">
            <summary>Задает оболочка совместимости RegistrationBuilder.CreateRegistration(Guid id, RegistrationData data, IInstanceActivator activator, IEnumerable`1&lt;Service&gt; services, IComponentRegistration target)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationBuilder.ForDelegateTypeFuncOfIComponentContextIEnumerableOfParameterObject">
            <summary>Задает оболочка совместимости RegistrationBuilder.ForDelegate(Type limitType, Func`3&lt;IComponentContext,IEnumerable`1&lt;Parameter&gt;,Object&gt; delegate)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationBuilder.ForTypeType">
            <summary>Задает оболочка совместимости RegistrationBuilder.ForType(Type implementationType)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimRegistrationData">
            <summary>Тип оболочки совместимости для Autofac.Builder.RegistrationData</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationData.#ctor(Autofac.Builder.RegistrationData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationData.AddAllOf1ICollectionOfM0IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Задает оболочка совместимости RegistrationData.AddAll(ICollection`1&lt;!!0&gt; to, IEnumerable`1&lt;!!0&gt; from)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.ActivatedHandlersGet">
            <summary>Задает оболочка совместимости RegistrationData.get_ActivatedHandlers()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.ActivatingHandlersGet">
            <summary>Задает оболочка совместимости RegistrationData.get_ActivatingHandlers()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AddServiceService">
            <summary>Задает оболочка совместимости RegistrationData.AddService(Service service)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AddServicesIEnumerableOfService">
            <summary>Задает оболочка совместимости RegistrationData.AddServices(IEnumerable`1&lt;Service&gt; services)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.ClearServices">
            <summary>Задает оболочка совместимости RegistrationData.ClearServices()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.ConstructorService">
            <summary>Задает оболочка совместимости RegistrationData.RegistrationData(Service defaultService)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.CopyFromRegistrationDataBoolean">
            <summary>Задает оболочка совместимости RegistrationData.CopyFrom(RegistrationData that, Boolean includeDefaultService)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.LifetimeGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Lifetime()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.LifetimeSetIComponentLifetime">
            <summary>Задает оболочка совместимости RegistrationData.set_Lifetime(IComponentLifetime value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.MetadataGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Metadata()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.OwnershipGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Ownership()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.OwnershipSetInstanceOwnership">
            <summary>Задает оболочка совместимости RegistrationData.set_Ownership(InstanceOwnership value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.PreparingHandlersGet">
            <summary>Задает оболочка совместимости RegistrationData.get_PreparingHandlers()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.ServicesGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Services()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.SharingGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Sharing()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.SharingSetInstanceSharing">
            <summary>Задает оболочка совместимости RegistrationData.set_Sharing(InstanceSharing value)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.ActivatedHandlersGet">
            <summary>Задает оболочка совместимости RegistrationData.get_ActivatedHandlers()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.ActivatingHandlersGet">
            <summary>Задает оболочка совместимости RegistrationData.get_ActivatingHandlers()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.AddServiceService">
            <summary>Задает оболочка совместимости RegistrationData.AddService(Service service)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.AddServicesIEnumerableOfService">
            <summary>Задает оболочка совместимости RegistrationData.AddServices(IEnumerable`1&lt;Service&gt; services)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.ClearServices">
            <summary>Задает оболочка совместимости RegistrationData.ClearServices()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.CopyFromRegistrationDataBoolean">
            <summary>Задает оболочка совместимости RegistrationData.CopyFrom(RegistrationData that, Boolean includeDefaultService)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.LifetimeGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Lifetime()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.LifetimeSetIComponentLifetime">
            <summary>Задает оболочка совместимости RegistrationData.set_Lifetime(IComponentLifetime value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.MetadataGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Metadata()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.OwnershipGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Ownership()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.OwnershipSetInstanceOwnership">
            <summary>Задает оболочка совместимости RegistrationData.set_Ownership(InstanceOwnership value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.PreparingHandlersGet">
            <summary>Задает оболочка совместимости RegistrationData.get_PreparingHandlers()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.ServicesGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Services()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.SharingGet">
            <summary>Задает оболочка совместимости RegistrationData.get_Sharing()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationData.AllInstances.SharingSetInstanceSharing">
            <summary>Задает оболочка совместимости RegistrationData.set_Sharing(InstanceSharing value)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimRegistrationExtensions">
            <summary>Тип оболочки совместимости для Autofac.Builder.RegistrationExtensions</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.MemberOfOf3IRegistrationBuilderOfM0M1M2String``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.MemberOf(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, String collectionName)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.NamedParameterMappingOf3IRegistrationBuilderOfM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.NamedParameterMapping(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.PositionalParameterMappingOf3IRegistrationBuilderOfM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.PositionalParameterMapping(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.RegisterCollectionOf1ContainerBuilderString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.String,Autofac.Builder.IRegistrationBuilder{``0[],Autofac.Builder.SimpleActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterCollection(ContainerBuilder builder, String collectionName)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.RegisterGeneratedFactoryOf1ContainerBuilder``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterGeneratedFactory(ContainerBuilder builder)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.RegisterGeneratedFactoryOf1ContainerBuilderService``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,Autofac.Core.Service,Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterGeneratedFactory(ContainerBuilder builder, Service service)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimRegistrationExtensions.TypedParameterMappingOf3IRegistrationBuilderOfM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.TypedParameterMapping(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationExtensions.RegisterCollectionContainerBuilderStringType">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterCollection(ContainerBuilder builder, String collectionName, Type elementType)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationExtensions.RegisterGeneratedFactoryContainerBuilderType">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterGeneratedFactory(ContainerBuilder builder, Type delegateType)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimRegistrationExtensions.RegisterGeneratedFactoryContainerBuilderTypeService">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterGeneratedFactory(ContainerBuilder builder, Type delegateType, Service service)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimSimpleActivatorData">
            <summary>Тип оболочки совместимости для Autofac.Builder.SimpleActivatorData</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimSimpleActivatorData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimSimpleActivatorData.#ctor(Autofac.Builder.SimpleActivatorData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimSimpleActivatorData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimSimpleActivatorData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimSimpleActivatorData.Bind(Autofac.Builder.IConcreteActivatorData)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSimpleActivatorData.ActivatorGet">
            <summary>Задает оболочка совместимости SimpleActivatorData.get_Activator()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSimpleActivatorData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSimpleActivatorData.ConstructorIInstanceActivator">
            <summary>Задает оболочка совместимости SimpleActivatorData.SimpleActivatorData(IInstanceActivator activator)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimSimpleActivatorData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSimpleActivatorData.AllInstances.ActivatorGet">
            <summary>Задает оболочка совместимости SimpleActivatorData.get_Activator()</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimSingleRegistrationStyle">
            <summary>Тип оболочки совместимости для Autofac.Builder.SingleRegistrationStyle</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.#ctor(Autofac.Builder.SingleRegistrationStyle)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.Constructor">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.SingleRegistrationStyle()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.IdGet">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.get_Id()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.IdSetGuid">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.set_Id(Guid value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.PreserveDefaultsGet">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.get_PreserveDefaults()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.PreserveDefaultsSetBoolean">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.set_PreserveDefaults(Boolean value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.RegisteredHandlersGet">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.get_RegisteredHandlers()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.TargetGet">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.get_Target()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.TargetSetIComponentRegistration">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.set_Target(IComponentRegistration value)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.AllInstances.IdGet">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.get_Id()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.AllInstances.IdSetGuid">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.set_Id(Guid value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.AllInstances.PreserveDefaultsGet">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.get_PreserveDefaults()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.AllInstances.PreserveDefaultsSetBoolean">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.set_PreserveDefaults(Boolean value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.AllInstances.RegisteredHandlersGet">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.get_RegisteredHandlers()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.AllInstances.TargetGet">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.get_Target()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.ShimSingleRegistrationStyle.AllInstances.TargetSetIComponentRegistration">
            <summary>Задает оболочка совместимости SingleRegistrationStyle.set_Target(IComponentRegistration value)</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubConcreteReflectionActivatorData">
            <summary>Тип заглушки Autofac.Builder.ConcreteReflectionActivatorData</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubConcreteReflectionActivatorData.#ctor(System.Type)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubConcreteReflectionActivatorData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubConcreteReflectionActivatorData</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubConcreteReflectionActivatorData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubConcreteReflectionActivatorData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubConcreteReflectionActivatorData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubDynamicRegistrationStyle">
            <summary>Тип заглушки Autofac.Builder.DynamicRegistrationStyle</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubDynamicRegistrationStyle.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubDynamicRegistrationStyle.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDynamicRegistrationStyle</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubDynamicRegistrationStyle.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubDynamicRegistrationStyle.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubDynamicRegistrationStyle.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubIConcreteActivatorData">
            <summary>Тип заглушки Autofac.Builder.IConcreteActivatorData</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIConcreteActivatorData.#ctor">
            <summary>Инициализирует новый экземпляр type StubIConcreteActivatorData</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIConcreteActivatorData.ActivatorGet">
            <summary>Задает stub IConcreteActivatorData.get_Activator()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubIConcreteActivatorData.a::Autofac#Builder#IConcreteActivatorData#Activator">
            <summary>Задает stub IConcreteActivatorData.get_Activator()</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubIHideObjectMembers">
            <summary>Тип заглушки Autofac.Builder.IHideObjectMembers</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIHideObjectMembers.#ctor">
            <summary>Инициализирует новый экземпляр type StubIHideObjectMembers</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIHideObjectMembers.a::Autofac#Builder#IHideObjectMembers#Equals(System.Object)">
            <summary>Задает заглушка IHideObjectMembers.Equals(Object other)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIHideObjectMembers.a::Autofac#Builder#IHideObjectMembers#GetHashCode">
            <summary>Задает заглушка IHideObjectMembers.GetHashCode()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIHideObjectMembers.a::Autofac#Builder#IHideObjectMembers#GetType">
            <summary>Задает заглушка IHideObjectMembers.GetType()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIHideObjectMembers.a::Autofac#Builder#IHideObjectMembers#ToString">
            <summary>Задает заглушка IHideObjectMembers.ToString()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIHideObjectMembers.EqualsObject">
            <summary>Задает stub IHideObjectMembers.Equals(Object other)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIHideObjectMembers.GetHashCode">
            <summary>Задает stub IHideObjectMembers.GetHashCode()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIHideObjectMembers.GetType">
            <summary>Задает stub IHideObjectMembers.GetType()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIHideObjectMembers.ToString">
            <summary>Задает stub IHideObjectMembers.ToString()</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubIRegistrationBuilder`3">
            <summary>Тип заглушки Autofac.Builder.IRegistrationBuilder`3</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.#ctor">
            <summary>Инициализирует новый экземпляр type StubIRegistrationBuilder</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.ActivatorDataGet">
            <summary>Задает stub IRegistrationBuilder`3.get_ActivatorData()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.AsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{`0,`1,`2}})">
            <summary>Задает заглушки As()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.AsOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{`0,`1,`2}})">
            <summary>Задает заглушки As()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.AsOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{`0,`1,`2}})">
            <summary>Задает заглушки As()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.AsServiceArray">
            <summary>Задает stub IRegistrationBuilder`3.As(Service[] services)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.AsTypeArray">
            <summary>Задает stub IRegistrationBuilder`3.As(Type[] services)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#As``1">
            <summary>Задает заглушка IRegistrationBuilder`3.As()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#As``2">
            <summary>Задает заглушка IRegistrationBuilder`3.As()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#As``3">
            <summary>Задает заглушка IRegistrationBuilder`3.As()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#As(Autofac.Core.Service[])">
            <summary>Задает заглушка IRegistrationBuilder`3.As(Service[] services)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#As(System.Type[])">
            <summary>Задает заглушка IRegistrationBuilder`3.As(Type[] services)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#ExternallyOwned">
            <summary>Задает заглушка IRegistrationBuilder`3.ExternallyOwned()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#InstancePerDependency">
            <summary>Задает заглушка IRegistrationBuilder`3.InstancePerDependency()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#InstancePerLifetimeScope">
            <summary>Задает заглушка IRegistrationBuilder`3.InstancePerLifetimeScope()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#InstancePerMatchingLifetimeScope(System.Object[])">
            <summary>Задает заглушка IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(Object[] lifetimeScopeTag)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#InstancePerOwned``1">
            <summary>Задает заглушка IRegistrationBuilder`3.InstancePerOwned()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#InstancePerOwned``1(System.Object)">
            <summary>Задает заглушка IRegistrationBuilder`3.InstancePerOwned(Object serviceKey)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#InstancePerOwned(System.Type)">
            <summary>Задает заглушка IRegistrationBuilder`3.InstancePerOwned(Type serviceType)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#InstancePerOwned(System.Object,System.Type)">
            <summary>Задает заглушка IRegistrationBuilder`3.InstancePerOwned(Object serviceKey, Type serviceType)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#Keyed``1(System.Object)">
            <summary>Задает заглушка IRegistrationBuilder`3.Keyed(Object serviceKey)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#Keyed(System.Object,System.Type)">
            <summary>Задает заглушка IRegistrationBuilder`3.Keyed(Object serviceKey, Type serviceType)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#Named``1(System.String)">
            <summary>Задает заглушка IRegistrationBuilder`3.Named(String serviceName)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#Named(System.String,System.Type)">
            <summary>Задает заглушка IRegistrationBuilder`3.Named(String serviceName, Type serviceType)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#OnActivated(System.Action{Autofac.Core.IActivatedEventArgs{`0}})">
            <summary>Задает заглушка IRegistrationBuilder`3.OnActivated(Action`1&lt;IActivatedEventArgs`1&lt;!0&gt;&gt; handler)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#OnActivating(System.Action{Autofac.Core.IActivatingEventArgs{`0}})">
            <summary>Задает заглушка IRegistrationBuilder`3.OnActivating(Action`1&lt;IActivatingEventArgs`1&lt;!0&gt;&gt; handler)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#OnPreparing(System.Action{Autofac.Core.PreparingEventArgs})">
            <summary>Задает заглушка IRegistrationBuilder`3.OnPreparing(Action`1&lt;PreparingEventArgs&gt; handler)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#OwnedByLifetimeScope">
            <summary>Задает заглушка IRegistrationBuilder`3.OwnedByLifetimeScope()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#PropertiesAutowired(Autofac.PropertyWiringOptions)">
            <summary>Задает заглушка IRegistrationBuilder`3.PropertiesAutowired(PropertyWiringOptions options)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#SingleInstance">
            <summary>Задает заглушка IRegistrationBuilder`3.SingleInstance()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#WithMetadata``1(System.Action{Autofac.Builder.MetadataConfiguration{``0}})">
            <summary>Задает заглушка IRegistrationBuilder`3.WithMetadata(Action`1&lt;MetadataConfiguration`1&lt;!!0&gt;&gt; configurationAction)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>Задает заглушка IRegistrationBuilder`3.WithMetadata(IEnumerable`1&lt;KeyValuePair`2&lt;String,Object&gt;&gt; properties)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#WithMetadata(System.String,System.Object)">
            <summary>Задает заглушка IRegistrationBuilder`3.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.ExternallyOwned">
            <summary>Задает stub IRegistrationBuilder`3.ExternallyOwned()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.InstancePerDependency">
            <summary>Задает stub IRegistrationBuilder`3.InstancePerDependency()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.InstancePerLifetimeScope">
            <summary>Задает stub IRegistrationBuilder`3.InstancePerLifetimeScope()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.InstancePerMatchingLifetimeScopeObjectArray">
            <summary>Задает stub IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(Object[] lifetimeScopeTag)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.InstancePerOwnedObjectType">
            <summary>Задает stub IRegistrationBuilder`3.InstancePerOwned(Object serviceKey, Type serviceType)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.InstancePerOwnedOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{`0,`1,`2}})">
            <summary>Задает заглушки InstancePerOwned()</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.InstancePerOwnedOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,Autofac.Builder.IRegistrationBuilder{`0,`1,`2}})">
            <summary>Задает заглушки InstancePerOwned(Object serviceKey)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.InstancePerOwnedType">
            <summary>Задает stub IRegistrationBuilder`3.InstancePerOwned(Type serviceType)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.KeyedObjectType">
            <summary>Задает stub IRegistrationBuilder`3.Keyed(Object serviceKey, Type serviceType)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.KeyedOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,Autofac.Builder.IRegistrationBuilder{`0,`1,`2}})">
            <summary>Задает заглушки Keyed(Object serviceKey)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.NamedOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Autofac.Builder.IRegistrationBuilder{`0,`1,`2}})">
            <summary>Задает заглушки Named(String serviceName)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.NamedStringType">
            <summary>Задает stub IRegistrationBuilder`3.Named(String serviceName, Type serviceType)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.OnActivatedActionOfIActivatedEventArgsOfT0">
            <summary>Задает stub IRegistrationBuilder`3.OnActivated(Action`1&lt;IActivatedEventArgs`1&lt;!0&gt;&gt; handler)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.OnActivatingActionOfIActivatingEventArgsOfT0">
            <summary>Задает stub IRegistrationBuilder`3.OnActivating(Action`1&lt;IActivatingEventArgs`1&lt;!0&gt;&gt; handler)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.OnPreparingActionOfPreparingEventArgs">
            <summary>Задает stub IRegistrationBuilder`3.OnPreparing(Action`1&lt;PreparingEventArgs&gt; handler)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.OwnedByLifetimeScope">
            <summary>Задает stub IRegistrationBuilder`3.OwnedByLifetimeScope()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.PropertiesAutowiredPropertyWiringOptions">
            <summary>Задает stub IRegistrationBuilder`3.PropertiesAutowired(PropertyWiringOptions options)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.RegistrationDataGet">
            <summary>Задает stub IRegistrationBuilder`3.get_RegistrationData()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.RegistrationStyleGet">
            <summary>Задает stub IRegistrationBuilder`3.get_RegistrationStyle()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.SingleInstance">
            <summary>Задает stub IRegistrationBuilder`3.SingleInstance()</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.WithMetadataIEnumerableOfKeyValuePairOfStringObject">
            <summary>Задает stub IRegistrationBuilder`3.WithMetadata(IEnumerable`1&lt;KeyValuePair`2&lt;String,Object&gt;&gt; properties)</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.WithMetadataOf1ActionOfMetadataConfigurationOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Autofac.Builder.MetadataConfiguration{``0}},Autofac.Builder.IRegistrationBuilder{`0,`1,`2}})">
            <summary>Задает заглушки WithMetadata(Action`1&lt;MetadataConfiguration`1&lt;!!0&gt;&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.WithMetadataStringObject">
            <summary>Задает stub IRegistrationBuilder`3.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#ActivatorData">
            <summary>Задает stub IRegistrationBuilder`3.get_ActivatorData()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#RegistrationData">
            <summary>Задает stub IRegistrationBuilder`3.get_RegistrationData()</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubIRegistrationBuilder`3.a::Autofac#Builder#IRegistrationBuilder{TLimit@TActivatorData@TRegistrationStyle}#RegistrationStyle">
            <summary>Задает stub IRegistrationBuilder`3.get_RegistrationStyle()</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubMetadataConfiguration`1">
            <summary>Тип заглушки Autofac.Builder.MetadataConfiguration`1</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubMetadataConfiguration`1.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubMetadataConfiguration`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMetadataConfiguration</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubMetadataConfiguration`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubMetadataConfiguration`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubMetadataConfiguration`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubReflectionActivatorData">
            <summary>Тип заглушки Autofac.Builder.ReflectionActivatorData</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubReflectionActivatorData.#ctor(System.Type)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubReflectionActivatorData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubReflectionActivatorData</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubReflectionActivatorData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubReflectionActivatorData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubReflectionActivatorData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubRegistrationData">
            <summary>Тип заглушки Autofac.Builder.RegistrationData</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubRegistrationData.#ctor(Autofac.Core.Service)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubRegistrationData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubRegistrationData</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubRegistrationData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubRegistrationData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubRegistrationData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubSimpleActivatorData">
            <summary>Тип заглушки Autofac.Builder.SimpleActivatorData</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubSimpleActivatorData.#ctor(Autofac.Core.IInstanceActivator)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubSimpleActivatorData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSimpleActivatorData</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubSimpleActivatorData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubSimpleActivatorData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubSimpleActivatorData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Builder.Fakes.StubSingleRegistrationStyle">
            <summary>Тип заглушки Autofac.Builder.SingleRegistrationStyle</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubSingleRegistrationStyle.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Builder.Fakes.StubSingleRegistrationStyle.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSingleRegistrationStyle</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubSingleRegistrationStyle.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubSingleRegistrationStyle.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Builder.Fakes.StubSingleRegistrationStyle.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.Delegate.DelegateActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.#ctor(Autofac.Core.Activators.Delegate.DelegateActivator)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.Bind(Autofac.Core.IInstanceActivator)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.ActivateInstanceIComponentContextIEnumerableOfParameter">
            <summary>Задает оболочка совместимости DelegateActivator.ActivateInstance(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.ConstructorTypeFuncOfIComponentContextIEnumerableOfParameterObject">
            <summary>Задает оболочка совместимости DelegateActivator.DelegateActivator(Type limitType, Func`3&lt;IComponentContext,IEnumerable`1&lt;Parameter&gt;,Object&gt; activationFunction)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.Fakes.ShimDelegateActivator.AllInstances.ActivateInstanceIComponentContextIEnumerableOfParameter">
            <summary>Задает оболочка совместимости DelegateActivator.ActivateInstance(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator">
            <summary>Тип заглушки Autofac.Core.Activators.Delegate.DelegateActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator.#ctor(System.Type,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator.Dispose(System.Boolean)">
            <summary>Задает заглушка Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator.DisposeBoolean">
            <summary>Задает stub Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDelegateActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator.ToString">
            <summary>Задает заглушка InstanceActivator.ToString()</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator.ToString01">
            <summary>Задает stub InstanceActivator.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.Fakes.StubDelegateActivator.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Fakes.ShimInstanceActivator">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.InstanceActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Fakes.ShimInstanceActivator.#ctor(Autofac.Core.Activators.InstanceActivator)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Fakes.ShimInstanceActivator.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Fakes.ShimInstanceActivator.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Fakes.ShimInstanceActivator.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Fakes.ShimInstanceActivator.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Fakes.ShimInstanceActivator.ConstructorType">
            <summary>Задает оболочка совместимости InstanceActivator.InstanceActivator(Type limitType)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Fakes.ShimInstanceActivator.LimitTypeGet">
            <summary>Задает оболочка совместимости InstanceActivator.get_LimitType()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Fakes.ShimInstanceActivator.ToString">
            <summary>Задает оболочка совместимости InstanceActivator.ToString()</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Fakes.ShimInstanceActivator.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Fakes.ShimInstanceActivator.AllInstances.LimitTypeGet">
            <summary>Задает оболочка совместимости InstanceActivator.get_LimitType()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Fakes.ShimInstanceActivator.AllInstances.ToString01">
            <summary>Задает оболочка совместимости InstanceActivator.ToString()</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Fakes.StubInstanceActivator">
            <summary>Тип заглушки Autofac.Core.Activators.InstanceActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Fakes.StubInstanceActivator.#ctor(System.Type)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Fakes.StubInstanceActivator.Dispose(System.Boolean)">
            <summary>Задает заглушка Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Fakes.StubInstanceActivator.DisposeBoolean">
            <summary>Задает stub Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Fakes.StubInstanceActivator.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubInstanceActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Fakes.StubInstanceActivator.ToString">
            <summary>Задает заглушка InstanceActivator.ToString()</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Fakes.StubInstanceActivator.ToString01">
            <summary>Задает stub InstanceActivator.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Fakes.StubInstanceActivator.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Fakes.StubInstanceActivator.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Fakes.StubInstanceActivator.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.#ctor(Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.Bind(Autofac.Core.IInstanceActivator)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.ActivateInstanceIComponentContextIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ProvidedInstanceActivator.ActivateInstance(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.ConstructorObject">
            <summary>Задает оболочка совместимости ProvidedInstanceActivator.ProvidedInstanceActivator(Object instance)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.DisposeBoolean">
            <summary>Задает оболочка совместимости ProvidedInstanceActivator.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.DisposeInstanceGet">
            <summary>Задает оболочка совместимости ProvidedInstanceActivator.get_DisposeInstance()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.DisposeInstanceSetBoolean">
            <summary>Задает оболочка совместимости ProvidedInstanceActivator.set_DisposeInstance(Boolean value)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.AllInstances.ActivateInstanceIComponentContextIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ProvidedInstanceActivator.ActivateInstance(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.AllInstances.DisposeBoolean">
            <summary>Задает оболочка совместимости ProvidedInstanceActivator.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.AllInstances.DisposeInstanceGet">
            <summary>Задает оболочка совместимости ProvidedInstanceActivator.get_DisposeInstance()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.ShimProvidedInstanceActivator.AllInstances.DisposeInstanceSetBoolean">
            <summary>Задает оболочка совместимости ProvidedInstanceActivator.set_DisposeInstance(Boolean value)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator">
            <summary>Тип заглушки Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator.#ctor(System.Object)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator.Dispose(System.Boolean)">
            <summary>Задает заглушка ProvidedInstanceActivator.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator.DisposeBoolean">
            <summary>Задает stub ProvidedInstanceActivator.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubProvidedInstanceActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator.ToString">
            <summary>Задает заглушка InstanceActivator.ToString()</summary>
        </member>
        <member name="F:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator.ToString01">
            <summary>Задает stub InstanceActivator.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.Fakes.StubProvidedInstanceActivator.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.Reflection.AutowiringParameter</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter.#ctor(Autofac.Core.Activators.Reflection.AutowiringParameter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает оболочка совместимости AutowiringParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter.Constructor">
            <summary>Задает оболочка совместимости AutowiringParameter.AutowiringParameter()</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimAutowiringParameter.AllInstances.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает оболочка совместимости AutowiringParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.Reflection.ConstructorParameterBinding</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.#ctor(Autofac.Core.Activators.Reflection.ConstructorParameterBinding)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.CanInstantiateGet">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.get_CanInstantiate()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.ConstructorConstructorInfoIEnumerableOfParameterIComponentContext">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.ConstructorParameterBinding(ConstructorInfo ci, IEnumerable`1&lt;Parameter&gt; availableParameters, IComponentContext context)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.DescriptionGet">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.get_Description()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.GetConstructorInvokerConstructorInfo">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.GetConstructorInvoker(ConstructorInfo constructorInfo)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.Instantiate">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.Instantiate()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.StaticConstructor">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.ConstructorParameterBinding()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.TargetConstructorGet">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.get_TargetConstructor()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.ToString">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.ToString()</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.AllInstances.CanInstantiateGet">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.get_CanInstantiate()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.AllInstances.DescriptionGet">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.get_Description()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.AllInstances.Instantiate">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.Instantiate()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.AllInstances.TargetConstructorGet">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.get_TargetConstructor()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimConstructorParameterBinding.AllInstances.ToString01">
            <summary>Задает оболочка совместимости ConstructorParameterBinding.ToString()</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.Reflection.DefaultConstructorFinder</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.#ctor(Autofac.Core.Activators.Reflection.DefaultConstructorFinder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.Bind(Autofac.Core.Activators.Reflection.IConstructorFinder)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.Constructor">
            <summary>Задает оболочка совместимости DefaultConstructorFinder.DefaultConstructorFinder()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.ConstructorFuncOfTypeConstructorInfoArray">
            <summary>Задает оболочка совместимости DefaultConstructorFinder.DefaultConstructorFinder(Func`2&lt;Type,ConstructorInfo[]&gt; finder)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.FindConstructorsType">
            <summary>Задает оболочка совместимости DefaultConstructorFinder.FindConstructors(Type targetType)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder._ctorb__0Type">
            <summary>Задает оболочка совместимости DefaultConstructorFinder.&lt;.ctor&gt;b__0(Type type)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultConstructorFinder.AllInstances.FindConstructorsType">
            <summary>Задает оболочка совместимости DefaultConstructorFinder.FindConstructors(Type targetType)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.Reflection.DefaultValueParameter</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter.#ctor(Autofac.Core.Activators.Reflection.DefaultValueParameter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает оболочка совместимости DefaultValueParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter.Constructor">
            <summary>Задает оболочка совместимости DefaultValueParameter.DefaultValueParameter()</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimDefaultValueParameter.AllInstances.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает оболочка совместимости DefaultValueParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.#ctor(Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.Bind(Autofac.Core.Activators.Reflection.IConstructorSelector)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.ConstructorTypeArray">
            <summary>Задает оболочка совместимости MatchingSignatureConstructorSelector.MatchingSignatureConstructorSelector(Type[] signature)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.SelectConstructorBindingConstructorParameterBindingArray">
            <summary>Задает оболочка совместимости MatchingSignatureConstructorSelector.SelectConstructorBinding(ConstructorParameterBinding[] constructorBindings)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector._SelectConstructorBindingb__0ConstructorParameterBinding">
            <summary>Задает оболочка совместимости MatchingSignatureConstructorSelector.&lt;SelectConstructorBinding&gt;b__0(ConstructorParameterBinding b)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector._SelectConstructorBindingb__1ParameterInfo">
            <summary>Задает оболочка совместимости MatchingSignatureConstructorSelector.&lt;SelectConstructorBinding&gt;b__1(ParameterInfo p)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector._SelectConstructorBindingb__2Type">
            <summary>Задает оболочка совместимости MatchingSignatureConstructorSelector.&lt;SelectConstructorBinding&gt;b__2(Type t)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.AllInstances.SelectConstructorBindingConstructorParameterBindingArray">
            <summary>Задает оболочка совместимости MatchingSignatureConstructorSelector.SelectConstructorBinding(ConstructorParameterBinding[] constructorBindings)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMatchingSignatureConstructorSelector.AllInstances._SelectConstructorBindingb__0ConstructorParameterBinding">
            <summary>Задает оболочка совместимости MatchingSignatureConstructorSelector.&lt;SelectConstructorBinding&gt;b__0(ConstructorParameterBinding b)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.Reflection.MostParametersConstructorSelector</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.#ctor(Autofac.Core.Activators.Reflection.MostParametersConstructorSelector)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.Bind(Autofac.Core.Activators.Reflection.IConstructorSelector)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.Constructor">
            <summary>Задает оболочка совместимости MostParametersConstructorSelector.MostParametersConstructorSelector()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.SelectConstructorBindingConstructorParameterBindingArray">
            <summary>Задает оболочка совместимости MostParametersConstructorSelector.SelectConstructorBinding(ConstructorParameterBinding[] constructorBindings)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimMostParametersConstructorSelector.AllInstances.SelectConstructorBindingConstructorParameterBindingArray">
            <summary>Задает оболочка совместимости MostParametersConstructorSelector.SelectConstructorBinding(ConstructorParameterBinding[] constructorBindings)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator">
            <summary>Тип оболочки совместимости для Autofac.Core.Activators.Reflection.ReflectionActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.#ctor(Autofac.Core.Activators.Reflection.ReflectionActivator)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.Bind(Autofac.Core.IInstanceActivator)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.ActivateInstanceIComponentContextIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ReflectionActivator.ActivateInstance(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.ConstructorFinderGet">
            <summary>Задает оболочка совместимости ReflectionActivator.get_ConstructorFinder()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.ConstructorSelectorGet">
            <summary>Задает оболочка совместимости ReflectionActivator.get_ConstructorSelector()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.ConstructorTypeIConstructorFinderIConstructorSelectorIEnumerableOfParameterIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ReflectionActivator.ReflectionActivator(Type implementationType, IConstructorFinder constructorFinder, IConstructorSelector constructorSelector, IEnumerable`1&lt;Parameter&gt; configuredParameters, IEnumerable`1&lt;Parameter&gt; configuredProperties)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.GetBindingFailureMessageIEnumerableOfConstructorParameterBinding">
            <summary>Задает оболочка совместимости ReflectionActivator.GetBindingFailureMessage(IEnumerable`1&lt;ConstructorParameterBinding&gt; constructorBindings)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.GetConstructorBindingsIComponentContextIEnumerableOfParameterIEnumerableOfConstructorInfo">
            <summary>Задает оболочка совместимости ReflectionActivator.GetConstructorBindings(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, IEnumerable`1&lt;ConstructorInfo&gt; constructorInfo)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.InjectPropertiesObjectIComponentContext">
            <summary>Задает оболочка совместимости ReflectionActivator.InjectProperties(Object instance, IComponentContext context)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator._ActivateInstanceb__0ConstructorParameterBinding">
            <summary>Задает оболочка совместимости ReflectionActivator.&lt;ActivateInstance&gt;b__0(ConstructorParameterBinding cb)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator._GetBindingFailureMessageb__2ConstructorParameterBinding">
            <summary>Задает оболочка совместимости ReflectionActivator.&lt;GetBindingFailureMessage&gt;b__2(ConstructorParameterBinding cb)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator._InjectPropertiesb__7PropertyInfo">
            <summary>Задает оболочка совместимости ReflectionActivator.&lt;InjectProperties&gt;b__7(PropertyInfo pi)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.AllInstances.ActivateInstanceIComponentContextIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ReflectionActivator.ActivateInstance(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.AllInstances.ConstructorFinderGet">
            <summary>Задает оболочка совместимости ReflectionActivator.get_ConstructorFinder()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.AllInstances.ConstructorSelectorGet">
            <summary>Задает оболочка совместимости ReflectionActivator.get_ConstructorSelector()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.AllInstances.GetBindingFailureMessageIEnumerableOfConstructorParameterBinding">
            <summary>Задает оболочка совместимости ReflectionActivator.GetBindingFailureMessage(IEnumerable`1&lt;ConstructorParameterBinding&gt; constructorBindings)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.AllInstances.GetConstructorBindingsIComponentContextIEnumerableOfParameterIEnumerableOfConstructorInfo">
            <summary>Задает оболочка совместимости ReflectionActivator.GetConstructorBindings(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, IEnumerable`1&lt;ConstructorInfo&gt; constructorInfo)</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.ShimReflectionActivator.AllInstances.InjectPropertiesObjectIComponentContext">
            <summary>Задает оболочка совместимости ReflectionActivator.InjectProperties(Object instance, IComponentContext context)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.StubAutowiringParameter">
            <summary>Тип заглушки Autofac.Core.Activators.Reflection.AutowiringParameter</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubAutowiringParameter.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubAutowiringParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>Задает заглушка AutowiringParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Reflection.Fakes.StubAutowiringParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает stub AutowiringParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubAutowiringParameter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAutowiringParameter</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubAutowiringParameter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubAutowiringParameter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubAutowiringParameter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.StubConstructorParameterBinding">
            <summary>Тип заглушки Autofac.Core.Activators.Reflection.ConstructorParameterBinding</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubConstructorParameterBinding.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},Autofac.IComponentContext)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubConstructorParameterBinding.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubConstructorParameterBinding</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubConstructorParameterBinding.ToString">
            <summary>Задает заглушка ConstructorParameterBinding.ToString()</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Reflection.Fakes.StubConstructorParameterBinding.ToString01">
            <summary>Задает stub ConstructorParameterBinding.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubConstructorParameterBinding.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubConstructorParameterBinding.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubConstructorParameterBinding.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.StubDefaultConstructorFinder">
            <summary>Тип заглушки Autofac.Core.Activators.Reflection.DefaultConstructorFinder</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubDefaultConstructorFinder.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubDefaultConstructorFinder.#ctor(System.Func{System.Type,System.Reflection.ConstructorInfo[]})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubDefaultConstructorFinder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDefaultConstructorFinder</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubDefaultConstructorFinder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubDefaultConstructorFinder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubDefaultConstructorFinder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.StubDefaultValueParameter">
            <summary>Тип заглушки Autofac.Core.Activators.Reflection.DefaultValueParameter</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubDefaultValueParameter.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubDefaultValueParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>Задает заглушка DefaultValueParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Reflection.Fakes.StubDefaultValueParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает stub DefaultValueParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubDefaultValueParameter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDefaultValueParameter</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubDefaultValueParameter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubDefaultValueParameter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubDefaultValueParameter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.StubIConstructorFinder">
            <summary>Тип заглушки Autofac.Core.Activators.Reflection.IConstructorFinder</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubIConstructorFinder.#ctor">
            <summary>Инициализирует новый экземпляр type StubIConstructorFinder</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubIConstructorFinder.a::Autofac#Core#Activators#Reflection#IConstructorFinder#FindConstructors(System.Type)">
            <summary>Задает заглушка IConstructorFinder.FindConstructors(Type targetType)</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Reflection.Fakes.StubIConstructorFinder.FindConstructorsType">
            <summary>Задает stub IConstructorFinder.FindConstructors(Type targetType)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.StubIConstructorSelector">
            <summary>Тип заглушки Autofac.Core.Activators.Reflection.IConstructorSelector</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubIConstructorSelector.#ctor">
            <summary>Инициализирует новый экземпляр type StubIConstructorSelector</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubIConstructorSelector.a::Autofac#Core#Activators#Reflection#IConstructorSelector#SelectConstructorBinding(Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
            <summary>Задает заглушка IConstructorSelector.SelectConstructorBinding(ConstructorParameterBinding[] constructorBindings)</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Reflection.Fakes.StubIConstructorSelector.SelectConstructorBindingConstructorParameterBindingArray">
            <summary>Задает stub IConstructorSelector.SelectConstructorBinding(ConstructorParameterBinding[] constructorBindings)</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.StubMatchingSignatureConstructorSelector">
            <summary>Тип заглушки Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubMatchingSignatureConstructorSelector.#ctor(System.Type[])">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubMatchingSignatureConstructorSelector.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMatchingSignatureConstructorSelector</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubMatchingSignatureConstructorSelector.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubMatchingSignatureConstructorSelector.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubMatchingSignatureConstructorSelector.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.StubMostParametersConstructorSelector">
            <summary>Тип заглушки Autofac.Core.Activators.Reflection.MostParametersConstructorSelector</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubMostParametersConstructorSelector.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubMostParametersConstructorSelector.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMostParametersConstructorSelector</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubMostParametersConstructorSelector.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubMostParametersConstructorSelector.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubMostParametersConstructorSelector.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator">
            <summary>Тип заглушки Autofac.Core.Activators.Reflection.ReflectionActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator.#ctor(System.Type,Autofac.Core.Activators.Reflection.IConstructorFinder,Autofac.Core.Activators.Reflection.IConstructorSelector,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator.Dispose(System.Boolean)">
            <summary>Задает заглушка Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator.DisposeBoolean">
            <summary>Задает stub Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubReflectionActivator</summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator.ToString">
            <summary>Задает заглушка InstanceActivator.ToString()</summary>
        </member>
        <member name="F:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator.ToString01">
            <summary>Задает stub InstanceActivator.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.Fakes.StubReflectionActivator.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimActivatedEventArgs`1">
            <summary>Тип оболочки совместимости для Autofac.Core.ActivatedEventArgs`1</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatedEventArgs`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatedEventArgs`1.#ctor(Autofac.Core.ActivatedEventArgs{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatedEventArgs`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatedEventArgs`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatedEventArgs`1.Bind(Autofac.Core.IActivatedEventArgs{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.ComponentGet">
            <summary>Задает оболочка совместимости ActivatedEventArgs`1.get_Component()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.ConstructorIComponentContextIComponentRegistrationIEnumerableOfParameterT0">
            <summary>Задает оболочка совместимости ActivatedEventArgs`1.ActivatedEventArgs`1(IComponentContext context, IComponentRegistration component, IEnumerable`1&lt;Parameter&gt; parameters, !0 instance)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.ContextGet">
            <summary>Задает оболочка совместимости ActivatedEventArgs`1.get_Context()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.InstanceGet">
            <summary>Задает оболочка совместимости ActivatedEventArgs`1.get_Instance()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.ParametersGet">
            <summary>Задает оболочка совместимости ActivatedEventArgs`1.get_Parameters()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimActivatedEventArgs`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.AllInstances.ComponentGet">
            <summary>Задает оболочка совместимости ActivatedEventArgs`1.get_Component()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.AllInstances.ContextGet">
            <summary>Задает оболочка совместимости ActivatedEventArgs`1.get_Context()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.AllInstances.InstanceGet">
            <summary>Задает оболочка совместимости ActivatedEventArgs`1.get_Instance()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatedEventArgs`1.AllInstances.ParametersGet">
            <summary>Задает оболочка совместимости ActivatedEventArgs`1.get_Parameters()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimActivatingEventArgs`1">
            <summary>Тип оболочки совместимости для Autofac.Core.ActivatingEventArgs`1</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatingEventArgs`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatingEventArgs`1.#ctor(Autofac.Core.ActivatingEventArgs{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatingEventArgs`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatingEventArgs`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimActivatingEventArgs`1.Bind(Autofac.Core.IActivatingEventArgs{`0})">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.ComponentGet">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.get_Component()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.ConstructorIComponentContextIComponentRegistrationIEnumerableOfParameterT0">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.ActivatingEventArgs`1(IComponentContext context, IComponentRegistration component, IEnumerable`1&lt;Parameter&gt; parameters, !0 instance)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.ContextGet">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.get_Context()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.InstanceGet">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.get_Instance()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.InstanceSetT0">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.set_Instance(!0 value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.ParametersGet">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.get_Parameters()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.ReplaceInstanceObject">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.ReplaceInstance(Object instance)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimActivatingEventArgs`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.AllInstances.ComponentGet">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.get_Component()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.AllInstances.ContextGet">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.get_Context()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.AllInstances.InstanceGet">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.get_Instance()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.AllInstances.InstanceSetT0">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.set_Instance(!0 value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.AllInstances.ParametersGet">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.get_Parameters()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimActivatingEventArgs`1.AllInstances.ReplaceInstanceObject">
            <summary>Задает оболочка совместимости ActivatingEventArgs`1.ReplaceInstance(Object instance)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.ComponentRegisteredEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.#ctor(Autofac.Core.ComponentRegisteredEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.ComponentRegistrationGet">
            <summary>Задает оболочка совместимости ComponentRegisteredEventArgs.get_ComponentRegistration()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.ComponentRegistryGet">
            <summary>Задает оболочка совместимости ComponentRegisteredEventArgs.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.ConstructorIComponentRegistryIComponentRegistration">
            <summary>Задает оболочка совместимости ComponentRegisteredEventArgs.ComponentRegisteredEventArgs(IComponentRegistry registry, IComponentRegistration componentRegistration)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.AllInstances.ComponentRegistrationGet">
            <summary>Задает оболочка совместимости ComponentRegisteredEventArgs.get_ComponentRegistration()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimComponentRegisteredEventArgs.AllInstances.ComponentRegistryGet">
            <summary>Задает оболочка совместимости ComponentRegisteredEventArgs.get_ComponentRegistry()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimConstantParameter">
            <summary>Тип оболочки совместимости для Autofac.Core.ConstantParameter</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimConstantParameter.#ctor(Autofac.Core.ConstantParameter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimConstantParameter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimConstantParameter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает оболочка совместимости ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter.ConstructorObjectPredicateOfParameterInfo">
            <summary>Задает оболочка совместимости ConstantParameter.ConstantParameter(Object value, Predicate`1&lt;ParameterInfo&gt; predicate)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter.ValueGet">
            <summary>Задает оболочка совместимости ConstantParameter.get_Value()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter.ValueSetObject">
            <summary>Задает оболочка совместимости ConstantParameter.set_Value(Object value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter._CanSupplyValueb__0">
            <summary>Задает оболочка совместимости ConstantParameter.&lt;CanSupplyValue&gt;b__0()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimConstantParameter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter.AllInstances.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает оболочка совместимости ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter.AllInstances.ValueGet">
            <summary>Задает оболочка совместимости ConstantParameter.get_Value()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter.AllInstances.ValueSetObject">
            <summary>Задает оболочка совместимости ConstantParameter.set_Value(Object value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimConstantParameter.AllInstances._CanSupplyValueb__0">
            <summary>Задает оболочка совместимости ConstantParameter.&lt;CanSupplyValue&gt;b__0()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimContainer">
            <summary>Тип оболочки совместимости для Autofac.Core.Container</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimContainer.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimContainer.#ctor(Autofac.Core.Container)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimContainer.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimContainer.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimContainer.Bind(Autofac.IComponentContext)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimContainer.Bind(Autofac.IContainer)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimContainer.Bind(Autofac.ILifetimeScope)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimContainer.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimContainer.Bind(System.IServiceProvider)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.BeginLifetimeScope">
            <summary>Задает оболочка совместимости Container.BeginLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.BeginLifetimeScopeActionOfContainerBuilder">
            <summary>Задает оболочка совместимости Container.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.BeginLifetimeScopeObject">
            <summary>Задает оболочка совместимости Container.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.BeginLifetimeScopeObjectActionOfContainerBuilder">
            <summary>Задает оболочка совместимости Container.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.ChildLifetimeScopeBeginningAddEventHandlerOfLifetimeScopeBeginningEventArgs">
            <summary>Задает оболочка совместимости Container.add_ChildLifetimeScopeBeginning(EventHandler`1&lt;LifetimeScopeBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.ChildLifetimeScopeBeginningRemoveEventHandlerOfLifetimeScopeBeginningEventArgs">
            <summary>Задает оболочка совместимости Container.remove_ChildLifetimeScopeBeginning(EventHandler`1&lt;LifetimeScopeBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.ComponentRegistryGet">
            <summary>Задает оболочка совместимости Container.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.Constructor">
            <summary>Задает оболочка совместимости Container.Container()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.CurrentScopeEndingAddEventHandlerOfLifetimeScopeEndingEventArgs">
            <summary>Задает оболочка совместимости Container.add_CurrentScopeEnding(EventHandler`1&lt;LifetimeScopeEndingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.CurrentScopeEndingRemoveEventHandlerOfLifetimeScopeEndingEventArgs">
            <summary>Задает оболочка совместимости Container.remove_CurrentScopeEnding(EventHandler`1&lt;LifetimeScopeEndingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.DisposeBoolean">
            <summary>Задает оболочка совместимости Container.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.DisposerGet">
            <summary>Задает оболочка совместимости Container.get_Disposer()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.GetServiceType">
            <summary>Задает оболочка совместимости Container.GetService(Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.ResolveComponentIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает оболочка совместимости Container.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.ResolveOperationBeginningAddEventHandlerOfResolveOperationBeginningEventArgs">
            <summary>Задает оболочка совместимости Container.add_ResolveOperationBeginning(EventHandler`1&lt;ResolveOperationBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.ResolveOperationBeginningRemoveEventHandlerOfResolveOperationBeginningEventArgs">
            <summary>Задает оболочка совместимости Container.remove_ResolveOperationBeginning(EventHandler`1&lt;ResolveOperationBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.TagGet">
            <summary>Задает оболочка совместимости Container.get_Tag()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer._ctorb__0IComponentContextIEnumerableOfParameter">
            <summary>Задает оболочка совместимости Container.&lt;.ctor&gt;b__0(IComponentContext c, IEnumerable`1&lt;Parameter&gt; p)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimContainer.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.BeginLifetimeScope">
            <summary>Задает оболочка совместимости Container.BeginLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.BeginLifetimeScopeActionOfContainerBuilder">
            <summary>Задает оболочка совместимости Container.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.BeginLifetimeScopeObject">
            <summary>Задает оболочка совместимости Container.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.BeginLifetimeScopeObjectActionOfContainerBuilder">
            <summary>Задает оболочка совместимости Container.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.ChildLifetimeScopeBeginningAddEventHandlerOfLifetimeScopeBeginningEventArgs">
            <summary>Задает оболочка совместимости Container.add_ChildLifetimeScopeBeginning(EventHandler`1&lt;LifetimeScopeBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.ChildLifetimeScopeBeginningRemoveEventHandlerOfLifetimeScopeBeginningEventArgs">
            <summary>Задает оболочка совместимости Container.remove_ChildLifetimeScopeBeginning(EventHandler`1&lt;LifetimeScopeBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.ComponentRegistryGet">
            <summary>Задает оболочка совместимости Container.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.CurrentScopeEndingAddEventHandlerOfLifetimeScopeEndingEventArgs">
            <summary>Задает оболочка совместимости Container.add_CurrentScopeEnding(EventHandler`1&lt;LifetimeScopeEndingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.CurrentScopeEndingRemoveEventHandlerOfLifetimeScopeEndingEventArgs">
            <summary>Задает оболочка совместимости Container.remove_CurrentScopeEnding(EventHandler`1&lt;LifetimeScopeEndingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.DisposeBoolean">
            <summary>Задает оболочка совместимости Container.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.DisposerGet">
            <summary>Задает оболочка совместимости Container.get_Disposer()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.GetServiceType">
            <summary>Задает оболочка совместимости Container.GetService(Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.ResolveComponentIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает оболочка совместимости Container.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.ResolveOperationBeginningAddEventHandlerOfResolveOperationBeginningEventArgs">
            <summary>Задает оболочка совместимости Container.add_ResolveOperationBeginning(EventHandler`1&lt;ResolveOperationBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.ResolveOperationBeginningRemoveEventHandlerOfResolveOperationBeginningEventArgs">
            <summary>Задает оболочка совместимости Container.remove_ResolveOperationBeginning(EventHandler`1&lt;ResolveOperationBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimContainer.AllInstances.TagGet">
            <summary>Задает оболочка совместимости Container.get_Tag()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimDependencyResolutionException">
            <summary>Тип оболочки совместимости для Autofac.Core.DependencyResolutionException</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimDependencyResolutionException.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimDependencyResolutionException.#ctor(Autofac.Core.DependencyResolutionException)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimDependencyResolutionException.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimDependencyResolutionException.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimDependencyResolutionException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimDependencyResolutionException.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimDependencyResolutionException.ConstructorString">
            <summary>Задает оболочка совместимости DependencyResolutionException.DependencyResolutionException(String message)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimDependencyResolutionException.ConstructorStringException">
            <summary>Задает оболочка совместимости DependencyResolutionException.DependencyResolutionException(String message, Exception innerException)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimDependencyResolutionException.MessageGet">
            <summary>Задает оболочка совместимости DependencyResolutionException.get_Message()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimDependencyResolutionException.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimDependencyResolutionException.AllInstances.MessageGet">
            <summary>Задает оболочка совместимости DependencyResolutionException.get_Message()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimKeyedService">
            <summary>Тип оболочки совместимости для Autofac.Core.KeyedService</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimKeyedService.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimKeyedService.#ctor(Autofac.Core.KeyedService)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimKeyedService.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimKeyedService.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimKeyedService.Bind(Autofac.Core.IServiceWithType)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.ChangeTypeType">
            <summary>Задает оболочка совместимости KeyedService.ChangeType(Type newType)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.ConstructorObjectType">
            <summary>Задает оболочка совместимости KeyedService.KeyedService(Object serviceKey, Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.DescriptionGet">
            <summary>Задает оболочка совместимости KeyedService.get_Description()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.EqualsObject">
            <summary>Задает оболочка совместимости KeyedService.Equals(Object obj)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.GetHashCode">
            <summary>Задает оболочка совместимости KeyedService.GetHashCode()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.ServiceKeyGet">
            <summary>Задает оболочка совместимости KeyedService.get_ServiceKey()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.ServiceTypeGet">
            <summary>Задает оболочка совместимости KeyedService.get_ServiceType()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimKeyedService.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.AllInstances.ChangeTypeType">
            <summary>Задает оболочка совместимости KeyedService.ChangeType(Type newType)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.AllInstances.DescriptionGet">
            <summary>Задает оболочка совместимости KeyedService.get_Description()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости KeyedService.Equals(Object obj)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости KeyedService.GetHashCode()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.AllInstances.ServiceKeyGet">
            <summary>Задает оболочка совместимости KeyedService.get_ServiceKey()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimKeyedService.AllInstances.ServiceTypeGet">
            <summary>Задает оболочка совместимости KeyedService.get_ServiceType()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimNamedPropertyParameter">
            <summary>Тип оболочки совместимости для Autofac.Core.NamedPropertyParameter</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimNamedPropertyParameter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimNamedPropertyParameter.#ctor(Autofac.Core.NamedPropertyParameter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimNamedPropertyParameter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimNamedPropertyParameter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimNamedPropertyParameter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimNamedPropertyParameter.ConstructorStringObject">
            <summary>Задает оболочка совместимости NamedPropertyParameter.NamedPropertyParameter(String name, Object value)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimNamedPropertyParameter.NameGet">
            <summary>Задает оболочка совместимости NamedPropertyParameter.get_Name()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimNamedPropertyParameter.NameSetString">
            <summary>Задает оболочка совместимости NamedPropertyParameter.set_Name(String value)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimNamedPropertyParameter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimNamedPropertyParameter.AllInstances.NameGet">
            <summary>Задает оболочка совместимости NamedPropertyParameter.get_Name()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimNamedPropertyParameter.AllInstances.NameSetString">
            <summary>Задает оболочка совместимости NamedPropertyParameter.set_Name(String value)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimParameter">
            <summary>Тип оболочки совместимости для Autofac.Core.Parameter</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimParameter.#ctor(Autofac.Core.Parameter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimParameter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimParameter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimParameter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimParameter.Constructor">
            <summary>Задает оболочка совместимости Parameter.Parameter()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimParameter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimPreparingEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.PreparingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimPreparingEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimPreparingEventArgs.#ctor(Autofac.Core.PreparingEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimPreparingEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimPreparingEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.ComponentGet">
            <summary>Задает оболочка совместимости PreparingEventArgs.get_Component()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.ConstructorIComponentContextIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает оболочка совместимости PreparingEventArgs.PreparingEventArgs(IComponentContext context, IComponentRegistration component, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.ContextGet">
            <summary>Задает оболочка совместимости PreparingEventArgs.get_Context()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.ParametersGet">
            <summary>Задает оболочка совместимости PreparingEventArgs.get_Parameters()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.ParametersSetIEnumerableOfParameter">
            <summary>Задает оболочка совместимости PreparingEventArgs.set_Parameters(IEnumerable`1&lt;Parameter&gt; value)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimPreparingEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.AllInstances.ComponentGet">
            <summary>Задает оболочка совместимости PreparingEventArgs.get_Component()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.AllInstances.ContextGet">
            <summary>Задает оболочка совместимости PreparingEventArgs.get_Context()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.AllInstances.ParametersGet">
            <summary>Задает оболочка совместимости PreparingEventArgs.get_Parameters()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimPreparingEventArgs.AllInstances.ParametersSetIEnumerableOfParameter">
            <summary>Задает оболочка совместимости PreparingEventArgs.set_Parameters(IEnumerable`1&lt;Parameter&gt; value)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.RegistrationSourceAddedEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.#ctor(Autofac.Core.RegistrationSourceAddedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.ComponentRegistryGet">
            <summary>Задает оболочка совместимости RegistrationSourceAddedEventArgs.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.ConstructorIComponentRegistryIRegistrationSource">
            <summary>Задает оболочка совместимости RegistrationSourceAddedEventArgs.RegistrationSourceAddedEventArgs(IComponentRegistry componentRegistry, IRegistrationSource registrationSource)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.RegistrationSourceGet">
            <summary>Задает оболочка совместимости RegistrationSourceAddedEventArgs.get_RegistrationSource()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.AllInstances.ComponentRegistryGet">
            <summary>Задает оболочка совместимости RegistrationSourceAddedEventArgs.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimRegistrationSourceAddedEventArgs.AllInstances.RegistrationSourceGet">
            <summary>Задает оболочка совместимости RegistrationSourceAddedEventArgs.get_RegistrationSource()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimResolvedParameter">
            <summary>Тип оболочки совместимости для Autofac.Core.ResolvedParameter</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimResolvedParameter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimResolvedParameter.#ctor(Autofac.Core.ResolvedParameter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimResolvedParameter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimResolvedParameter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimResolvedParameter.ForKeyedOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,Autofac.Core.ResolvedParameter})">
            <summary>Задает оболочка совместимости ResolvedParameter.ForKeyed(Object serviceKey)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimResolvedParameter.ForNamedOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Autofac.Core.ResolvedParameter})">
            <summary>Задает оболочка совместимости ResolvedParameter.ForNamed(String serviceName)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimResolvedParameter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimResolvedParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает оболочка совместимости ResolvedParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimResolvedParameter.ConstructorFuncOfParameterInfoIComponentContextBooleanFuncOfParameterInfoIComponentContextObject">
            <summary>Задает оболочка совместимости ResolvedParameter.ResolvedParameter(Func`3&lt;ParameterInfo,IComponentContext,Boolean&gt; predicate, Func`3&lt;ParameterInfo,IComponentContext,Object&gt; valueAccessor)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimResolvedParameter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimResolvedParameter.AllInstances.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает оболочка совместимости ResolvedParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimService">
            <summary>Тип оболочки совместимости для Autofac.Core.Service</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimService.#ctor(Autofac.Core.Service)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimService.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimService.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.Constructor">
            <summary>Задает оболочка совместимости Service.Service()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.EqualityOpServiceService">
            <summary>Задает оболочка совместимости Service.op_Equality(Service left, Service right)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.EqualsObject">
            <summary>Задает оболочка совместимости Service.Equals(Object obj)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.GetHashCode">
            <summary>Задает оболочка совместимости Service.GetHashCode()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.InequalityOpServiceService">
            <summary>Задает оболочка совместимости Service.op_Inequality(Service left, Service right)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.ToString">
            <summary>Задает оболочка совместимости Service.ToString()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimService.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости Service.Equals(Object obj)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости Service.GetHashCode()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimService.AllInstances.ToString01">
            <summary>Задает оболочка совместимости Service.ToString()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimTypedService">
            <summary>Тип оболочки совместимости для Autofac.Core.TypedService</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimTypedService.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimTypedService.#ctor(Autofac.Core.TypedService)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimTypedService.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimTypedService.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimTypedService.Bind(Autofac.Core.IServiceWithType)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.ChangeTypeType">
            <summary>Задает оболочка совместимости TypedService.ChangeType(Type newType)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.ConstructorType">
            <summary>Задает оболочка совместимости TypedService.TypedService(Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.DescriptionGet">
            <summary>Задает оболочка совместимости TypedService.get_Description()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.EqualsObject">
            <summary>Задает оболочка совместимости TypedService.Equals(Object obj)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.GetHashCode">
            <summary>Задает оболочка совместимости TypedService.GetHashCode()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.ServiceTypeGet">
            <summary>Задает оболочка совместимости TypedService.get_ServiceType()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.ServiceTypeSetType">
            <summary>Задает оболочка совместимости TypedService.set_ServiceType(Type value)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimTypedService.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.AllInstances.ChangeTypeType">
            <summary>Задает оболочка совместимости TypedService.ChangeType(Type newType)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.AllInstances.DescriptionGet">
            <summary>Задает оболочка совместимости TypedService.get_Description()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости TypedService.Equals(Object obj)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости TypedService.GetHashCode()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.AllInstances.ServiceTypeGet">
            <summary>Задает оболочка совместимости TypedService.get_ServiceType()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimTypedService.AllInstances.ServiceTypeSetType">
            <summary>Задает оболочка совместимости TypedService.set_ServiceType(Type value)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimUniqueService">
            <summary>Тип оболочки совместимости для Autofac.Core.UniqueService</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimUniqueService.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimUniqueService.#ctor(Autofac.Core.UniqueService)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimUniqueService.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.ShimUniqueService.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimUniqueService.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimUniqueService.Constructor">
            <summary>Задает оболочка совместимости UniqueService.UniqueService()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimUniqueService.ConstructorGuid">
            <summary>Задает оболочка совместимости UniqueService.UniqueService(Guid id)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimUniqueService.DescriptionGet">
            <summary>Задает оболочка совместимости UniqueService.get_Description()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimUniqueService.EqualsObject">
            <summary>Задает оболочка совместимости UniqueService.Equals(Object obj)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimUniqueService.GetHashCode">
            <summary>Задает оболочка совместимости UniqueService.GetHashCode()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.ShimUniqueService.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimUniqueService.AllInstances.DescriptionGet">
            <summary>Задает оболочка совместимости UniqueService.get_Description()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimUniqueService.AllInstances.EqualsObject">
            <summary>Задает оболочка совместимости UniqueService.Equals(Object obj)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.ShimUniqueService.AllInstances.GetHashCode01">
            <summary>Задает оболочка совместимости UniqueService.GetHashCode()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubActivatedEventArgs`1">
            <summary>Тип заглушки Autofac.Core.ActivatedEventArgs`1</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubActivatedEventArgs`1.#ctor(Autofac.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},`0)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubActivatedEventArgs`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubActivatedEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubActivatedEventArgs`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubActivatedEventArgs`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubActivatedEventArgs`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubActivatingEventArgs`1">
            <summary>Тип заглушки Autofac.Core.ActivatingEventArgs`1</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubActivatingEventArgs`1.#ctor(Autofac.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},`0)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubActivatingEventArgs`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubActivatingEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubActivatingEventArgs`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubActivatingEventArgs`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubActivatingEventArgs`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubComponentRegisteredEventArgs">
            <summary>Тип заглушки Autofac.Core.ComponentRegisteredEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubComponentRegisteredEventArgs.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubComponentRegisteredEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubComponentRegisteredEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubComponentRegisteredEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubComponentRegisteredEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubComponentRegisteredEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubConstantParameter">
            <summary>Тип заглушки Autofac.Core.ConstantParameter</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubConstantParameter.#ctor(System.Object,System.Predicate{System.Reflection.ParameterInfo})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubConstantParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>Задает заглушка ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubConstantParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает stub ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubConstantParameter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubConstantParameter</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubConstantParameter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubConstantParameter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubConstantParameter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubDependencyResolutionException">
            <summary>Тип заглушки Autofac.Core.DependencyResolutionException</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubDependencyResolutionException.#ctor(System.String)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubDependencyResolutionException.#ctor(System.String,System.Exception)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubDependencyResolutionException.AttachBackingFieldToHelpLink">
            <summary>Присоединение делегатов для эмуляции StubDependencyResolutionException.HelpLink как свойства с резервным полем.</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubDependencyResolutionException.AttachBackingFieldToSource">
            <summary>Присоединение делегатов для эмуляции StubDependencyResolutionException.Source как свойства с резервным полем.</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.DataGet">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubDependencyResolutionException.GetBaseException">
            <summary>Задает заглушка Exception.GetBaseException()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.GetBaseException01">
            <summary>Задает stub Exception.GetBaseException()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubDependencyResolutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Задает заглушка Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Задает stub Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.HelpLinkGet">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.HelpLinkSetString">
            <summary>Задает stub Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubDependencyResolutionException.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDependencyResolutionException</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.MessageGet">
            <summary>Задает stub DependencyResolutionException.get_Message()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.SourceGet">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.SourceSetString">
            <summary>Задает stub Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.StackTraceGet">
            <summary>Задает stub Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubDependencyResolutionException.ToString">
            <summary>Задает заглушка Exception.ToString()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubDependencyResolutionException.ToString01">
            <summary>Задает stub Exception.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubDependencyResolutionException.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubDependencyResolutionException.Data">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubDependencyResolutionException.HelpLink">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubDependencyResolutionException.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubDependencyResolutionException.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubDependencyResolutionException.Message">
            <summary>Задает stub DependencyResolutionException.get_Message()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubDependencyResolutionException.Source">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubDependencyResolutionException.StackTrace">
            <summary>Задает stub Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIActivatedEventArgs`1">
            <summary>Тип заглушки Autofac.Core.IActivatedEventArgs`1</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIActivatedEventArgs`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubIActivatedEventArgs</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIActivatedEventArgs`1.ComponentGet">
            <summary>Задает stub IActivatedEventArgs`1.get_Component()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIActivatedEventArgs`1.ContextGet">
            <summary>Задает stub IActivatedEventArgs`1.get_Context()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIActivatedEventArgs`1.InstanceGet">
            <summary>Задает stub IActivatedEventArgs`1.get_Instance()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIActivatedEventArgs`1.ParametersGet">
            <summary>Задает stub IActivatedEventArgs`1.get_Parameters()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIActivatedEventArgs`1.a::Autofac#Core#IActivatedEventArgs{T}#Component">
            <summary>Задает stub IActivatedEventArgs`1.get_Component()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIActivatedEventArgs`1.a::Autofac#Core#IActivatedEventArgs{T}#Context">
            <summary>Задает stub IActivatedEventArgs`1.get_Context()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIActivatedEventArgs`1.a::Autofac#Core#IActivatedEventArgs{T}#Instance">
            <summary>Задает stub IActivatedEventArgs`1.get_Instance()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIActivatedEventArgs`1.a::Autofac#Core#IActivatedEventArgs{T}#Parameters">
            <summary>Задает stub IActivatedEventArgs`1.get_Parameters()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIActivatingEventArgs`1">
            <summary>Тип заглушки Autofac.Core.IActivatingEventArgs`1</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIActivatingEventArgs`1.#ctor">
            <summary>Инициализирует новый экземпляр type StubIActivatingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIActivatingEventArgs`1.a::Autofac#Core#IActivatingEventArgs{T}#ReplaceInstance(System.Object)">
            <summary>Задает заглушка IActivatingEventArgs`1.ReplaceInstance(Object instance)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIActivatingEventArgs`1.ComponentGet">
            <summary>Задает stub IActivatingEventArgs`1.get_Component()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIActivatingEventArgs`1.ContextGet">
            <summary>Задает stub IActivatingEventArgs`1.get_Context()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIActivatingEventArgs`1.InstanceGet">
            <summary>Задает stub IActivatingEventArgs`1.get_Instance()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIActivatingEventArgs`1.ParametersGet">
            <summary>Задает stub IActivatingEventArgs`1.get_Parameters()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIActivatingEventArgs`1.ReplaceInstanceObject">
            <summary>Задает stub IActivatingEventArgs`1.ReplaceInstance(Object instance)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIActivatingEventArgs`1.a::Autofac#Core#IActivatingEventArgs{T}#Component">
            <summary>Задает stub IActivatingEventArgs`1.get_Component()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIActivatingEventArgs`1.a::Autofac#Core#IActivatingEventArgs{T}#Context">
            <summary>Задает stub IActivatingEventArgs`1.get_Context()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIActivatingEventArgs`1.a::Autofac#Core#IActivatingEventArgs{T}#Instance">
            <summary>Задает stub IActivatingEventArgs`1.get_Instance()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIActivatingEventArgs`1.a::Autofac#Core#IActivatingEventArgs{T}#Parameters">
            <summary>Задает stub IActivatingEventArgs`1.get_Parameters()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIComponentLifetime">
            <summary>Тип заглушки Autofac.Core.IComponentLifetime</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentLifetime.#ctor">
            <summary>Инициализирует новый экземпляр type StubIComponentLifetime</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentLifetime.a::Autofac#Core#IComponentLifetime#FindScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>Задает заглушка IComponentLifetime.FindScope(ISharingLifetimeScope mostNestedVisibleScope)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentLifetime.FindScopeISharingLifetimeScope">
            <summary>Задает stub IComponentLifetime.FindScope(ISharingLifetimeScope mostNestedVisibleScope)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIComponentRegistration">
            <summary>Тип заглушки Autofac.Core.IComponentRegistration</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistration.#ctor">
            <summary>Инициализирует новый экземпляр type StubIComponentRegistration</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.ActivatorGet">
            <summary>Задает stub IComponentRegistration.get_Activator()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#RaiseActivated(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object)">
            <summary>Задает заглушка IComponentRegistration.RaiseActivated(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, Object instance)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#RaiseActivating(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object@)">
            <summary>Задает заглушка IComponentRegistration.RaiseActivating(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, Object&amp; instance)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#RaisePreparing(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter}@)">
            <summary>Задает заглушка IComponentRegistration.RaisePreparing(IComponentContext context, IEnumerable`1&lt;Parameter&gt;&amp; parameters)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.Dispose">
            <summary>Задает stub IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.IdGet">
            <summary>Задает stub IComponentRegistration.get_Id()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.LifetimeGet">
            <summary>Задает stub IComponentRegistration.get_Lifetime()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.MetadataGet">
            <summary>Задает stub IComponentRegistration.get_Metadata()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.OwnershipGet">
            <summary>Задает stub IComponentRegistration.get_Ownership()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.RaiseActivatedIComponentContextIEnumerableOfParameterObject">
            <summary>Задает stub IComponentRegistration.RaiseActivated(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, Object instance)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.RaiseActivatingIComponentContextIEnumerableOfParameterObjectRef">
            <summary>Задает stub IComponentRegistration.RaiseActivating(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, Object&amp; instance)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.RaisePreparingIComponentContextIEnumerableOfParameterRef">
            <summary>Задает stub IComponentRegistration.RaisePreparing(IComponentContext context, IEnumerable`1&lt;Parameter&gt;&amp; parameters)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.ServicesGet">
            <summary>Задает stub IComponentRegistration.get_Services()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.SharingGet">
            <summary>Задает stub IComponentRegistration.get_Sharing()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistration.global::System#IDisposable#Dispose">
            <summary>Задает заглушка IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistration.TargetGet">
            <summary>Задает stub IComponentRegistration.get_Target()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#Activator">
            <summary>Задает stub IComponentRegistration.get_Activator()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#Id">
            <summary>Задает stub IComponentRegistration.get_Id()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#Lifetime">
            <summary>Задает stub IComponentRegistration.get_Lifetime()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#Metadata">
            <summary>Задает stub IComponentRegistration.get_Metadata()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#Ownership">
            <summary>Задает stub IComponentRegistration.get_Ownership()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#Services">
            <summary>Задает stub IComponentRegistration.get_Services()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#Sharing">
            <summary>Задает stub IComponentRegistration.get_Sharing()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistration.a::Autofac#Core#IComponentRegistration#Target">
            <summary>Задает stub IComponentRegistration.get_Target()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIComponentRegistry">
            <summary>Тип заглушки Autofac.Core.IComponentRegistry</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistry.#ctor">
            <summary>Инициализирует новый экземпляр type StubIComponentRegistry</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.AddRegistrationSourceIRegistrationSource">
            <summary>Задает stub IComponentRegistry.AddRegistrationSource(IRegistrationSource source)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistry.a::Autofac#Core#IComponentRegistry#AddRegistrationSource(Autofac.Core.IRegistrationSource)">
            <summary>Задает заглушка IComponentRegistry.AddRegistrationSource(IRegistrationSource source)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistry.a::Autofac#Core#IComponentRegistry#IsRegistered(Autofac.Core.Service)">
            <summary>Задает заглушка IComponentRegistry.IsRegistered(Service service)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistry.a::Autofac#Core#IComponentRegistry#Register(Autofac.Core.IComponentRegistration)">
            <summary>Задает заглушка IComponentRegistry.Register(IComponentRegistration registration)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistry.a::Autofac#Core#IComponentRegistry#Register(Autofac.Core.IComponentRegistration,System.Boolean)">
            <summary>Задает заглушка IComponentRegistry.Register(IComponentRegistration registration, Boolean preserveDefaults)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistry.a::Autofac#Core#IComponentRegistry#RegistrationsFor(Autofac.Core.Service)">
            <summary>Задает заглушка IComponentRegistry.RegistrationsFor(Service service)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistry.a::Autofac#Core#IComponentRegistry#TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
            <summary>Задает заглушка IComponentRegistry.TryGetRegistration(Service service, IComponentRegistration&amp; registration)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.Dispose">
            <summary>Задает stub IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.HasLocalComponentsGet">
            <summary>Задает stub IComponentRegistry.get_HasLocalComponents()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.IsRegisteredService">
            <summary>Задает stub IComponentRegistry.IsRegistered(Service service)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.RegisterIComponentRegistration">
            <summary>Задает stub IComponentRegistry.Register(IComponentRegistration registration)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.RegisterIComponentRegistrationBoolean">
            <summary>Задает stub IComponentRegistry.Register(IComponentRegistration registration, Boolean preserveDefaults)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.RegistrationsForService">
            <summary>Задает stub IComponentRegistry.RegistrationsFor(Service service)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.RegistrationsGet">
            <summary>Задает stub IComponentRegistry.get_Registrations()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.SourcesGet">
            <summary>Задает stub IComponentRegistry.get_Sources()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIComponentRegistry.global::System#IDisposable#Dispose">
            <summary>Задает заглушка IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIComponentRegistry.TryGetRegistrationServiceIComponentRegistrationOut">
            <summary>Задает stub IComponentRegistry.TryGetRegistration(Service service, IComponentRegistration&amp; registration)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistry.a::Autofac#Core#IComponentRegistry#HasLocalComponents">
            <summary>Задает stub IComponentRegistry.get_HasLocalComponents()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistry.a::Autofac#Core#IComponentRegistry#Registrations">
            <summary>Задает stub IComponentRegistry.get_Registrations()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIComponentRegistry.a::Autofac#Core#IComponentRegistry#Sources">
            <summary>Задает stub IComponentRegistry.get_Sources()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIDisposer">
            <summary>Тип заглушки Autofac.Core.IDisposer</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIDisposer.#ctor">
            <summary>Инициализирует новый экземпляр type StubIDisposer</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIDisposer.AddInstanceForDisposalIDisposable">
            <summary>Задает stub IDisposer.AddInstanceForDisposal(IDisposable instance)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIDisposer.a::Autofac#Core#IDisposer#AddInstanceForDisposal(System.IDisposable)">
            <summary>Задает заглушка IDisposer.AddInstanceForDisposal(IDisposable instance)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIDisposer.Dispose">
            <summary>Задает stub IDisposable.Dispose()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIDisposer.global::System#IDisposable#Dispose">
            <summary>Задает заглушка IDisposable.Dispose()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIInstanceActivator">
            <summary>Тип заглушки Autofac.Core.IInstanceActivator</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIInstanceActivator.#ctor">
            <summary>Инициализирует новый экземпляр type StubIInstanceActivator</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIInstanceActivator.ActivateInstanceIComponentContextIEnumerableOfParameter">
            <summary>Задает stub IInstanceActivator.ActivateInstance(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIInstanceActivator.a::Autofac#Core#IInstanceActivator#ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Задает заглушка IInstanceActivator.ActivateInstance(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIInstanceActivator.Dispose">
            <summary>Задает stub IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIInstanceActivator.LimitTypeGet">
            <summary>Задает stub IInstanceActivator.get_LimitType()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIInstanceActivator.global::System#IDisposable#Dispose">
            <summary>Задает заглушка IDisposable.Dispose()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIInstanceActivator.a::Autofac#Core#IInstanceActivator#LimitType">
            <summary>Задает stub IInstanceActivator.get_LimitType()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIModule">
            <summary>Тип заглушки Autofac.Core.IModule</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIModule.#ctor">
            <summary>Инициализирует новый экземпляр type StubIModule</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIModule.a::Autofac#Core#IModule#Configure(Autofac.Core.IComponentRegistry)">
            <summary>Задает заглушка IModule.Configure(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIModule.ConfigureIComponentRegistry">
            <summary>Задает stub IModule.Configure(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIRegistrationSource">
            <summary>Тип заглушки Autofac.Core.IRegistrationSource</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIRegistrationSource.#ctor">
            <summary>Инициализирует новый экземпляр type StubIRegistrationSource</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIRegistrationSource.a::Autofac#Core#IRegistrationSource#RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
            <summary>Задает заглушка IRegistrationSource.RegistrationsFor(Service service, Func`2&lt;Service,IEnumerable`1&lt;IComponentRegistration&gt;&gt; registrationAccessor)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIRegistrationSource.IsAdapterForIndividualComponentsGet">
            <summary>Задает stub IRegistrationSource.get_IsAdapterForIndividualComponents()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIRegistrationSource.RegistrationsForServiceFuncOfServiceIEnumerableOfIComponentRegistration">
            <summary>Задает stub IRegistrationSource.RegistrationsFor(Service service, Func`2&lt;Service,IEnumerable`1&lt;IComponentRegistration&gt;&gt; registrationAccessor)</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIRegistrationSource.a::Autofac#Core#IRegistrationSource#IsAdapterForIndividualComponents">
            <summary>Задает stub IRegistrationSource.get_IsAdapterForIndividualComponents()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubIServiceWithType">
            <summary>Тип заглушки Autofac.Core.IServiceWithType</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIServiceWithType.#ctor">
            <summary>Инициализирует новый экземпляр type StubIServiceWithType</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubIServiceWithType.a::Autofac#Core#IServiceWithType#ChangeType(System.Type)">
            <summary>Задает заглушка IServiceWithType.ChangeType(Type newType)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIServiceWithType.ChangeTypeType">
            <summary>Задает stub IServiceWithType.ChangeType(Type newType)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubIServiceWithType.ServiceTypeGet">
            <summary>Задает stub IServiceWithType.get_ServiceType()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubIServiceWithType.a::Autofac#Core#IServiceWithType#ServiceType">
            <summary>Задает stub IServiceWithType.get_ServiceType()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubISharingLifetimeScope">
            <summary>Тип заглушки Autofac.Core.ISharingLifetimeScope</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubISharingLifetimeScope.#ctor">
            <summary>Инициализирует новый экземпляр type StubISharingLifetimeScope</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#Core#ISharingLifetimeScope#GetOrCreateAndShare(System.Guid,System.Func{System.Object})">
            <summary>Задает заглушка ISharingLifetimeScope.GetOrCreateAndShare(Guid id, Func`1&lt;Object&gt; creator)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#IComponentContext#ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Задает заглушка IComponentContext.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#ILifetimeScope#BeginLifetimeScope">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#ILifetimeScope#BeginLifetimeScope(System.Object)">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#ILifetimeScope#BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#ILifetimeScope#BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.BeginLifetimeScope">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.BeginLifetimeScopeActionOfContainerBuilder">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.BeginLifetimeScopeObject">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.BeginLifetimeScopeObjectActionOfContainerBuilder">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.ComponentRegistryGet">
            <summary>Задает stub IComponentContext.get_ComponentRegistry()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.Dispose">
            <summary>Задает stub IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.DisposerGet">
            <summary>Задает stub ILifetimeScope.get_Disposer()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.GetOrCreateAndShareGuidFuncOfObject">
            <summary>Задает stub ISharingLifetimeScope.GetOrCreateAndShare(Guid id, Func`1&lt;Object&gt; creator)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.ParentLifetimeScopeGet">
            <summary>Задает stub ISharingLifetimeScope.get_ParentLifetimeScope()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.ResolveComponentIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает stub IComponentContext.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.RootLifetimeScopeGet">
            <summary>Задает stub ISharingLifetimeScope.get_RootLifetimeScope()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubISharingLifetimeScope.global::System#IDisposable#Dispose">
            <summary>Задает заглушка IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubISharingLifetimeScope.TagGet">
            <summary>Задает stub ILifetimeScope.get_Tag()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#IComponentContext#ComponentRegistry">
            <summary>Задает stub IComponentContext.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#ILifetimeScope#Disposer">
            <summary>Задает stub ILifetimeScope.get_Disposer()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#Core#ISharingLifetimeScope#ParentLifetimeScope">
            <summary>Задает stub ISharingLifetimeScope.get_ParentLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#Core#ISharingLifetimeScope#RootLifetimeScope">
            <summary>Задает stub ISharingLifetimeScope.get_RootLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubISharingLifetimeScope.a::Autofac#ILifetimeScope#Tag">
            <summary>Задает stub ILifetimeScope.get_Tag()</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubNamedPropertyParameter">
            <summary>Тип заглушки Autofac.Core.NamedPropertyParameter</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubNamedPropertyParameter.#ctor(System.String,System.Object)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubNamedPropertyParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>Задает заглушка ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubNamedPropertyParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает stub ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubNamedPropertyParameter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNamedPropertyParameter</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubNamedPropertyParameter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubNamedPropertyParameter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubNamedPropertyParameter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubParameter">
            <summary>Тип заглушки Autofac.Core.Parameter</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubParameter.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>Задает заглушка Parameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает stub Parameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubParameter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubParameter</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubParameter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubParameter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubParameter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubPreparingEventArgs">
            <summary>Тип заглушки Autofac.Core.PreparingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubPreparingEventArgs.#ctor(Autofac.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubPreparingEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPreparingEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubPreparingEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubPreparingEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubPreparingEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubRegistrationSourceAddedEventArgs">
            <summary>Тип заглушки Autofac.Core.RegistrationSourceAddedEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubRegistrationSourceAddedEventArgs.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.IRegistrationSource)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubRegistrationSourceAddedEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubRegistrationSourceAddedEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubRegistrationSourceAddedEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubRegistrationSourceAddedEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubRegistrationSourceAddedEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubResolvedParameter">
            <summary>Тип заглушки Autofac.Core.ResolvedParameter</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubResolvedParameter.#ctor(System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Object})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubResolvedParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>Задает заглушка ResolvedParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubResolvedParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает stub ResolvedParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubResolvedParameter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubResolvedParameter</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubResolvedParameter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubResolvedParameter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubResolvedParameter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Fakes.StubService">
            <summary>Тип заглушки Autofac.Core.Service</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubService.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubService.DescriptionGet">
            <summary>Задает stub Service.get_Description()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubService.Equals(System.Object)">
            <summary>Задает заглушка Service.Equals(Object obj)</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubService.EqualsObject">
            <summary>Задает stub Service.Equals(Object obj)</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubService.GetHashCode">
            <summary>Задает заглушка Service.GetHashCode()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubService.GetHashCode01">
            <summary>Задает stub Service.GetHashCode()</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubService.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubService</summary>
        </member>
        <member name="M:Autofac.Core.Fakes.StubService.ToString">
            <summary>Задает заглушка Service.ToString()</summary>
        </member>
        <member name="F:Autofac.Core.Fakes.StubService.ToString01">
            <summary>Задает stub Service.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubService.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubService.Description">
            <summary>Задает stub Service.get_Description()</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubService.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Fakes.StubService.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime">
            <summary>Тип оболочки совместимости для Autofac.Core.Lifetime.CurrentScopeLifetime</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.#ctor(Autofac.Core.Lifetime.CurrentScopeLifetime)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.Bind(Autofac.Core.IComponentLifetime)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.Constructor">
            <summary>Задает оболочка совместимости CurrentScopeLifetime.CurrentScopeLifetime()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.FindScopeISharingLifetimeScope">
            <summary>Задает оболочка совместимости CurrentScopeLifetime.FindScope(ISharingLifetimeScope mostNestedVisibleScope)</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimCurrentScopeLifetime.AllInstances.FindScopeISharingLifetimeScope">
            <summary>Задает оболочка совместимости CurrentScopeLifetime.FindScope(ISharingLifetimeScope mostNestedVisibleScope)</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope">
            <summary>Тип оболочки совместимости для Autofac.Core.Lifetime.LifetimeScope</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.#ctor(Autofac.Core.Lifetime.LifetimeScope)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.Bind(Autofac.IComponentContext)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.Bind(Autofac.ILifetimeScope)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.Bind(Autofac.Core.ISharingLifetimeScope)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.Bind(System.IServiceProvider)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.BeginLifetimeScope">
            <summary>Задает оболочка совместимости LifetimeScope.BeginLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.BeginLifetimeScopeActionOfContainerBuilder">
            <summary>Задает оболочка совместимости LifetimeScope.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.BeginLifetimeScopeObject">
            <summary>Задает оболочка совместимости LifetimeScope.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.BeginLifetimeScopeObjectActionOfContainerBuilder">
            <summary>Задает оболочка совместимости LifetimeScope.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.CheckNotDisposed">
            <summary>Задает оболочка совместимости LifetimeScope.CheckNotDisposed()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ChildLifetimeScopeBeginningAddEventHandlerOfLifetimeScopeBeginningEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.add_ChildLifetimeScopeBeginning(EventHandler`1&lt;LifetimeScopeBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ChildLifetimeScopeBeginningRemoveEventHandlerOfLifetimeScopeBeginningEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.remove_ChildLifetimeScopeBeginning(EventHandler`1&lt;LifetimeScopeBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ComponentRegistryGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.Constructor">
            <summary>Задает оболочка совместимости LifetimeScope.LifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ConstructorIComponentRegistry">
            <summary>Задает оболочка совместимости LifetimeScope.LifetimeScope(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ConstructorIComponentRegistryLifetimeScopeObject">
            <summary>Задает оболочка совместимости LifetimeScope.LifetimeScope(IComponentRegistry componentRegistry, LifetimeScope parent, Object tag)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ConstructorIComponentRegistryObject">
            <summary>Задает оболочка совместимости LifetimeScope.LifetimeScope(IComponentRegistry componentRegistry, Object tag)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.CurrentScopeEndingAddEventHandlerOfLifetimeScopeEndingEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.add_CurrentScopeEnding(EventHandler`1&lt;LifetimeScopeEndingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.CurrentScopeEndingRemoveEventHandlerOfLifetimeScopeEndingEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.remove_CurrentScopeEnding(EventHandler`1&lt;LifetimeScopeEndingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.DisposeBoolean">
            <summary>Задает оболочка совместимости LifetimeScope.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.DisposerGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_Disposer()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.GetOrCreateAndShareGuidFuncOfObject">
            <summary>Задает оболочка совместимости LifetimeScope.GetOrCreateAndShare(Guid id, Func`1&lt;Object&gt; creator)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.GetServiceType">
            <summary>Задает оболочка совместимости LifetimeScope.GetService(Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.MakeAnonymousTag">
            <summary>Задает оболочка совместимости LifetimeScope.MakeAnonymousTag()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ParentLifetimeScopeGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_ParentLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.RaiseBeginningILifetimeScope">
            <summary>Задает оболочка совместимости LifetimeScope.RaiseBeginning(ILifetimeScope scope)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ResolveComponentIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает оболочка совместимости LifetimeScope.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ResolveOperationBeginningAddEventHandlerOfResolveOperationBeginningEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.add_ResolveOperationBeginning(EventHandler`1&lt;ResolveOperationBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.ResolveOperationBeginningRemoveEventHandlerOfResolveOperationBeginningEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.remove_ResolveOperationBeginning(EventHandler`1&lt;ResolveOperationBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.RootLifetimeScopeGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_RootLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.StaticConstructor">
            <summary>Задает оболочка совместимости LifetimeScope.LifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.TagGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_Tag()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope._CreateScopeRestrictedRegistryb__3IRegistrationSource">
            <summary>Задает оболочка совместимости LifetimeScope.&lt;CreateScopeRestrictedRegistry&gt;b__3(IRegistrationSource src)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope._CreateScopeRestrictedRegistryb__4ISharingLifetimeScope">
            <summary>Задает оболочка совместимости LifetimeScope.&lt;CreateScopeRestrictedRegistry&gt;b__4(ISharingLifetimeScope s)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope._CreateScopeRestrictedRegistryb__5ISharingLifetimeScope">
            <summary>Задает оболочка совместимости LifetimeScope.&lt;CreateScopeRestrictedRegistry&gt;b__5(ISharingLifetimeScope s)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope._cctorb__cContainerBuilder">
            <summary>Задает оболочка совместимости LifetimeScope.&lt;.cctor&gt;b__c(ContainerBuilder b)</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.BeginLifetimeScope">
            <summary>Задает оболочка совместимости LifetimeScope.BeginLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.BeginLifetimeScopeActionOfContainerBuilder">
            <summary>Задает оболочка совместимости LifetimeScope.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.BeginLifetimeScopeObject">
            <summary>Задает оболочка совместимости LifetimeScope.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.BeginLifetimeScopeObjectActionOfContainerBuilder">
            <summary>Задает оболочка совместимости LifetimeScope.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.CheckNotDisposed">
            <summary>Задает оболочка совместимости LifetimeScope.CheckNotDisposed()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.ChildLifetimeScopeBeginningAddEventHandlerOfLifetimeScopeBeginningEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.add_ChildLifetimeScopeBeginning(EventHandler`1&lt;LifetimeScopeBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.ChildLifetimeScopeBeginningRemoveEventHandlerOfLifetimeScopeBeginningEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.remove_ChildLifetimeScopeBeginning(EventHandler`1&lt;LifetimeScopeBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.ComponentRegistryGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.CurrentScopeEndingAddEventHandlerOfLifetimeScopeEndingEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.add_CurrentScopeEnding(EventHandler`1&lt;LifetimeScopeEndingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.CurrentScopeEndingRemoveEventHandlerOfLifetimeScopeEndingEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.remove_CurrentScopeEnding(EventHandler`1&lt;LifetimeScopeEndingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.DisposeBoolean">
            <summary>Задает оболочка совместимости LifetimeScope.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.DisposerGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_Disposer()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.GetOrCreateAndShareGuidFuncOfObject">
            <summary>Задает оболочка совместимости LifetimeScope.GetOrCreateAndShare(Guid id, Func`1&lt;Object&gt; creator)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.GetServiceType">
            <summary>Задает оболочка совместимости LifetimeScope.GetService(Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.ParentLifetimeScopeGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_ParentLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.RaiseBeginningILifetimeScope">
            <summary>Задает оболочка совместимости LifetimeScope.RaiseBeginning(ILifetimeScope scope)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.ResolveComponentIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает оболочка совместимости LifetimeScope.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.ResolveOperationBeginningAddEventHandlerOfResolveOperationBeginningEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.add_ResolveOperationBeginning(EventHandler`1&lt;ResolveOperationBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.ResolveOperationBeginningRemoveEventHandlerOfResolveOperationBeginningEventArgs">
            <summary>Задает оболочка совместимости LifetimeScope.remove_ResolveOperationBeginning(EventHandler`1&lt;ResolveOperationBeginningEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.RootLifetimeScopeGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_RootLifetimeScope()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScope.AllInstances.TagGet">
            <summary>Задает оболочка совместимости LifetimeScope.get_Tag()</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs.#ctor(Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs.ConstructorILifetimeScope">
            <summary>Задает оболочка совместимости LifetimeScopeBeginningEventArgs.LifetimeScopeBeginningEventArgs(ILifetimeScope lifetimeScope)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs.LifetimeScopeGet">
            <summary>Задает оболочка совместимости LifetimeScopeBeginningEventArgs.get_LifetimeScope()</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeBeginningEventArgs.AllInstances.LifetimeScopeGet">
            <summary>Задает оболочка совместимости LifetimeScopeBeginningEventArgs.get_LifetimeScope()</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs.#ctor(Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs.ConstructorILifetimeScope">
            <summary>Задает оболочка совместимости LifetimeScopeEndingEventArgs.LifetimeScopeEndingEventArgs(ILifetimeScope lifetimeScope)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs.LifetimeScopeGet">
            <summary>Задает оболочка совместимости LifetimeScopeEndingEventArgs.get_LifetimeScope()</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimLifetimeScopeEndingEventArgs.AllInstances.LifetimeScopeGet">
            <summary>Задает оболочка совместимости LifetimeScopeEndingEventArgs.get_LifetimeScope()</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime">
            <summary>Тип оболочки совместимости для Autofac.Core.Lifetime.MatchingScopeLifetime</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.#ctor(Autofac.Core.Lifetime.MatchingScopeLifetime)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.Bind(Autofac.Core.IComponentLifetime)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.ConstructorObjectArray">
            <summary>Задает оболочка совместимости MatchingScopeLifetime.MatchingScopeLifetime(Object[] lifetimeScopeTagsToMatch)</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.FindScopeISharingLifetimeScope">
            <summary>Задает оболочка совместимости MatchingScopeLifetime.FindScope(ISharingLifetimeScope mostNestedVisibleScope)</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimMatchingScopeLifetime.AllInstances.FindScopeISharingLifetimeScope">
            <summary>Задает оболочка совместимости MatchingScopeLifetime.FindScope(ISharingLifetimeScope mostNestedVisibleScope)</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime">
            <summary>Тип оболочки совместимости для Autofac.Core.Lifetime.RootScopeLifetime</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.#ctor(Autofac.Core.Lifetime.RootScopeLifetime)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.Bind(Autofac.Core.IComponentLifetime)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.Constructor">
            <summary>Задает оболочка совместимости RootScopeLifetime.RootScopeLifetime()</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.FindScopeISharingLifetimeScope">
            <summary>Задает оболочка совместимости RootScopeLifetime.FindScope(ISharingLifetimeScope mostNestedVisibleScope)</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.ShimRootScopeLifetime.AllInstances.FindScopeISharingLifetimeScope">
            <summary>Задает оболочка совместимости RootScopeLifetime.FindScope(ISharingLifetimeScope mostNestedVisibleScope)</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.StubCurrentScopeLifetime">
            <summary>Тип заглушки Autofac.Core.Lifetime.CurrentScopeLifetime</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubCurrentScopeLifetime.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubCurrentScopeLifetime.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubCurrentScopeLifetime</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubCurrentScopeLifetime.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubCurrentScopeLifetime.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubCurrentScopeLifetime.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.StubLifetimeScope">
            <summary>Тип заглушки Autofac.Core.Lifetime.LifetimeScope</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubLifetimeScope.#ctor(Autofac.Core.IComponentRegistry)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubLifetimeScope.#ctor(Autofac.Core.IComponentRegistry,System.Object)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubLifetimeScope.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.Lifetime.LifetimeScope,System.Object)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubLifetimeScope.Dispose(System.Boolean)">
            <summary>Задает заглушка LifetimeScope.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Autofac.Core.Lifetime.Fakes.StubLifetimeScope.DisposeBoolean">
            <summary>Задает stub LifetimeScope.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubLifetimeScope.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubLifetimeScope</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubLifetimeScope.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubLifetimeScope.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubLifetimeScope.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeBeginningEventArgs">
            <summary>Тип заглушки Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeBeginningEventArgs.#ctor(Autofac.ILifetimeScope)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeBeginningEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubLifetimeScopeBeginningEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeBeginningEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeBeginningEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeBeginningEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeEndingEventArgs">
            <summary>Тип заглушки Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeEndingEventArgs.#ctor(Autofac.ILifetimeScope)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeEndingEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubLifetimeScopeEndingEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeEndingEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeEndingEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubLifetimeScopeEndingEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.StubMatchingScopeLifetime">
            <summary>Тип заглушки Autofac.Core.Lifetime.MatchingScopeLifetime</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubMatchingScopeLifetime.#ctor(System.Object[])">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubMatchingScopeLifetime.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMatchingScopeLifetime</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubMatchingScopeLifetime.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubMatchingScopeLifetime.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubMatchingScopeLifetime.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.Fakes.StubRootScopeLifetime">
            <summary>Тип заглушки Autofac.Core.Lifetime.RootScopeLifetime</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubRootScopeLifetime.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.Fakes.StubRootScopeLifetime.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubRootScopeLifetime</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubRootScopeLifetime.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubRootScopeLifetime.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.Fakes.StubRootScopeLifetime.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException">
            <summary>Тип оболочки совместимости для Autofac.Core.Registration.ComponentNotRegisteredException</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException.#ctor(Autofac.Core.Registration.ComponentNotRegisteredException)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException.ConstructorService">
            <summary>Задает оболочка совместимости ComponentNotRegisteredException.ComponentNotRegisteredException(Service service)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException.ConstructorServiceException">
            <summary>Задает оболочка совместимости ComponentNotRegisteredException.ComponentNotRegisteredException(Service service, Exception innerException)</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.ShimComponentNotRegisteredException.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.ShimComponentRegistration">
            <summary>Тип оболочки совместимости для Autofac.Core.Registration.ComponentRegistration</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistration.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistration.#ctor(Autofac.Core.Registration.ComponentRegistration)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistration.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistration.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistration.Bind(Autofac.Core.IComponentRegistration)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistration.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ActivatedAddEventHandlerOfActivatedEventArgsOfObject">
            <summary>Задает оболочка совместимости ComponentRegistration.add_Activated(EventHandler`1&lt;ActivatedEventArgs`1&lt;Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ActivatedRemoveEventHandlerOfActivatedEventArgsOfObject">
            <summary>Задает оболочка совместимости ComponentRegistration.remove_Activated(EventHandler`1&lt;ActivatedEventArgs`1&lt;Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ActivatingAddEventHandlerOfActivatingEventArgsOfObject">
            <summary>Задает оболочка совместимости ComponentRegistration.add_Activating(EventHandler`1&lt;ActivatingEventArgs`1&lt;Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ActivatingRemoveEventHandlerOfActivatingEventArgsOfObject">
            <summary>Задает оболочка совместимости ComponentRegistration.remove_Activating(EventHandler`1&lt;ActivatingEventArgs`1&lt;Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ActivatorGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Activator()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ActivatorSetIInstanceActivator">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Activator(IInstanceActivator value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ConstructorGuidIInstanceActivatorIComponentLifetimeInstanceSharingInstanceOwnershipIEnumerableOfServiceIDictionaryOfStringObject">
            <summary>Задает оболочка совместимости ComponentRegistration.ComponentRegistration(Guid id, IInstanceActivator activator, IComponentLifetime lifetime, InstanceSharing sharing, InstanceOwnership ownership, IEnumerable`1&lt;Service&gt; services, IDictionary`2&lt;String,Object&gt; metadata)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ConstructorGuidIInstanceActivatorIComponentLifetimeInstanceSharingInstanceOwnershipIEnumerableOfServiceIDictionaryOfStringObjectIComponentRegistration">
            <summary>Задает оболочка совместимости ComponentRegistration.ComponentRegistration(Guid id, IInstanceActivator activator, IComponentLifetime lifetime, InstanceSharing sharing, InstanceOwnership ownership, IEnumerable`1&lt;Service&gt; services, IDictionary`2&lt;String,Object&gt; metadata, IComponentRegistration target)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.DisposeBoolean">
            <summary>Задает оболочка совместимости ComponentRegistration.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.IdGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Id()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.IdSetGuid">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Id(Guid value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.LifetimeGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Lifetime()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.LifetimeSetIComponentLifetime">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Lifetime(IComponentLifetime value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.MetadataGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Metadata()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.MetadataSetIDictionaryOfStringObject">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Metadata(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.OwnershipGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Ownership()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.OwnershipSetInstanceOwnership">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Ownership(InstanceOwnership value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.PreparingAddEventHandlerOfPreparingEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistration.add_Preparing(EventHandler`1&lt;PreparingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.PreparingRemoveEventHandlerOfPreparingEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistration.remove_Preparing(EventHandler`1&lt;PreparingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.RaiseActivatedIComponentContextIEnumerableOfParameterObject">
            <summary>Задает оболочка совместимости ComponentRegistration.RaiseActivated(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, Object instance)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.RaiseActivatingIComponentContextIEnumerableOfParameterObjectRef">
            <summary>Задает оболочка совместимости ComponentRegistration.RaiseActivating(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, Object&amp; instance)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.RaisePreparingIComponentContextIEnumerableOfParameterRef">
            <summary>Задает оболочка совместимости ComponentRegistration.RaisePreparing(IComponentContext context, IEnumerable`1&lt;Parameter&gt;&amp; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ServicesGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Services()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ServicesSetIEnumerableOfService">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Services(IEnumerable`1&lt;Service&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.SharingGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Sharing()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.SharingSetInstanceSharing">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Sharing(InstanceSharing value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.TargetGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Target()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.ToString">
            <summary>Задает оболочка совместимости ComponentRegistration.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration._ToStringb__0Service">
            <summary>Задает оболочка совместимости ComponentRegistration.&lt;ToString&gt;b__0(Service s)</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.ActivatedAddEventHandlerOfActivatedEventArgsOfObject">
            <summary>Задает оболочка совместимости ComponentRegistration.add_Activated(EventHandler`1&lt;ActivatedEventArgs`1&lt;Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.ActivatedRemoveEventHandlerOfActivatedEventArgsOfObject">
            <summary>Задает оболочка совместимости ComponentRegistration.remove_Activated(EventHandler`1&lt;ActivatedEventArgs`1&lt;Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.ActivatingAddEventHandlerOfActivatingEventArgsOfObject">
            <summary>Задает оболочка совместимости ComponentRegistration.add_Activating(EventHandler`1&lt;ActivatingEventArgs`1&lt;Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.ActivatingRemoveEventHandlerOfActivatingEventArgsOfObject">
            <summary>Задает оболочка совместимости ComponentRegistration.remove_Activating(EventHandler`1&lt;ActivatingEventArgs`1&lt;Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.ActivatorGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Activator()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.ActivatorSetIInstanceActivator">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Activator(IInstanceActivator value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.DisposeBoolean">
            <summary>Задает оболочка совместимости ComponentRegistration.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.IdGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Id()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.IdSetGuid">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Id(Guid value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.LifetimeGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Lifetime()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.LifetimeSetIComponentLifetime">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Lifetime(IComponentLifetime value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.MetadataGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Metadata()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.MetadataSetIDictionaryOfStringObject">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Metadata(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.OwnershipGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Ownership()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.OwnershipSetInstanceOwnership">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Ownership(InstanceOwnership value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.PreparingAddEventHandlerOfPreparingEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistration.add_Preparing(EventHandler`1&lt;PreparingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.PreparingRemoveEventHandlerOfPreparingEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistration.remove_Preparing(EventHandler`1&lt;PreparingEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.RaiseActivatedIComponentContextIEnumerableOfParameterObject">
            <summary>Задает оболочка совместимости ComponentRegistration.RaiseActivated(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, Object instance)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.RaiseActivatingIComponentContextIEnumerableOfParameterObjectRef">
            <summary>Задает оболочка совместимости ComponentRegistration.RaiseActivating(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters, Object&amp; instance)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.RaisePreparingIComponentContextIEnumerableOfParameterRef">
            <summary>Задает оболочка совместимости ComponentRegistration.RaisePreparing(IComponentContext context, IEnumerable`1&lt;Parameter&gt;&amp; parameters)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.ServicesGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Services()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.ServicesSetIEnumerableOfService">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Services(IEnumerable`1&lt;Service&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.SharingGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Sharing()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.SharingSetInstanceSharing">
            <summary>Задает оболочка совместимости ComponentRegistration.set_Sharing(InstanceSharing value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.TargetGet">
            <summary>Задает оболочка совместимости ComponentRegistration.get_Target()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistration.AllInstances.ToString01">
            <summary>Задает оболочка совместимости ComponentRegistration.ToString()</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.ShimComponentRegistry">
            <summary>Тип оболочки совместимости для Autofac.Core.Registration.ComponentRegistry</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistry.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistry.#ctor(Autofac.Core.Registration.ComponentRegistry)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistry.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistry.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistry.Bind(Autofac.Core.IComponentRegistry)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.ShimComponentRegistry.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AddRegistrationIComponentRegistrationBoolean">
            <summary>Задает оболочка совместимости ComponentRegistry.AddRegistration(IComponentRegistration registration, Boolean preserveDefaults)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AddRegistrationSourceIRegistrationSource">
            <summary>Задает оболочка совместимости ComponentRegistry.AddRegistrationSource(IRegistrationSource source)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.Constructor">
            <summary>Задает оболочка совместимости ComponentRegistry.ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.DisposeBoolean">
            <summary>Задает оболочка совместимости ComponentRegistry.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.HasLocalComponentsGet">
            <summary>Задает оболочка совместимости ComponentRegistry.get_HasLocalComponents()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.IsRegisteredService">
            <summary>Задает оболочка совместимости ComponentRegistry.IsRegistered(Service service)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.RegisterIComponentRegistration">
            <summary>Задает оболочка совместимости ComponentRegistry.Register(IComponentRegistration registration)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.RegisterIComponentRegistrationBoolean">
            <summary>Задает оболочка совместимости ComponentRegistry.Register(IComponentRegistration registration, Boolean preserveDefaults)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.RegisteredAddEventHandlerOfComponentRegisteredEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistry.add_Registered(EventHandler`1&lt;ComponentRegisteredEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.RegisteredRemoveEventHandlerOfComponentRegisteredEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistry.remove_Registered(EventHandler`1&lt;ComponentRegisteredEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.RegistrationSourceAddedAddEventHandlerOfRegistrationSourceAddedEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistry.add_RegistrationSourceAdded(EventHandler`1&lt;RegistrationSourceAddedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.RegistrationSourceAddedRemoveEventHandlerOfRegistrationSourceAddedEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistry.remove_RegistrationSourceAdded(EventHandler`1&lt;RegistrationSourceAddedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.RegistrationsForService">
            <summary>Задает оболочка совместимости ComponentRegistry.RegistrationsFor(Service service)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.RegistrationsGet">
            <summary>Задает оболочка совместимости ComponentRegistry.get_Registrations()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.SourcesGet">
            <summary>Задает оболочка совместимости ComponentRegistry.get_Sources()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.TryGetRegistrationServiceIComponentRegistrationOut">
            <summary>Задает оболочка совместимости ComponentRegistry.TryGetRegistration(Service service, IComponentRegistration&amp; registration)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.UpdateInitialisedAdaptersIComponentRegistration">
            <summary>Задает оболочка совместимости ComponentRegistry.UpdateInitialisedAdapters(IComponentRegistration registration)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry._UpdateInitialisedAdaptersb__5IRegistrationSource">
            <summary>Задает оболочка совместимости ComponentRegistry.&lt;UpdateInitialisedAdapters&gt;b__5(IRegistrationSource rs)</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.AddRegistrationIComponentRegistrationBoolean">
            <summary>Задает оболочка совместимости ComponentRegistry.AddRegistration(IComponentRegistration registration, Boolean preserveDefaults)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.AddRegistrationSourceIRegistrationSource">
            <summary>Задает оболочка совместимости ComponentRegistry.AddRegistrationSource(IRegistrationSource source)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.DisposeBoolean">
            <summary>Задает оболочка совместимости ComponentRegistry.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.HasLocalComponentsGet">
            <summary>Задает оболочка совместимости ComponentRegistry.get_HasLocalComponents()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.IsRegisteredService">
            <summary>Задает оболочка совместимости ComponentRegistry.IsRegistered(Service service)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.RegisterIComponentRegistration">
            <summary>Задает оболочка совместимости ComponentRegistry.Register(IComponentRegistration registration)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.RegisterIComponentRegistrationBoolean">
            <summary>Задает оболочка совместимости ComponentRegistry.Register(IComponentRegistration registration, Boolean preserveDefaults)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.RegisteredAddEventHandlerOfComponentRegisteredEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistry.add_Registered(EventHandler`1&lt;ComponentRegisteredEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.RegisteredRemoveEventHandlerOfComponentRegisteredEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistry.remove_Registered(EventHandler`1&lt;ComponentRegisteredEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.RegistrationSourceAddedAddEventHandlerOfRegistrationSourceAddedEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistry.add_RegistrationSourceAdded(EventHandler`1&lt;RegistrationSourceAddedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.RegistrationSourceAddedRemoveEventHandlerOfRegistrationSourceAddedEventArgs">
            <summary>Задает оболочка совместимости ComponentRegistry.remove_RegistrationSourceAdded(EventHandler`1&lt;RegistrationSourceAddedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.RegistrationsForService">
            <summary>Задает оболочка совместимости ComponentRegistry.RegistrationsFor(Service service)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.RegistrationsGet">
            <summary>Задает оболочка совместимости ComponentRegistry.get_Registrations()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.SourcesGet">
            <summary>Задает оболочка совместимости ComponentRegistry.get_Sources()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.TryGetRegistrationServiceIComponentRegistrationOut">
            <summary>Задает оболочка совместимости ComponentRegistry.TryGetRegistration(Service service, IComponentRegistration&amp; registration)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.ShimComponentRegistry.AllInstances.UpdateInitialisedAdaptersIComponentRegistration">
            <summary>Задает оболочка совместимости ComponentRegistry.UpdateInitialisedAdapters(IComponentRegistration registration)</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException">
            <summary>Тип заглушки Autofac.Core.Registration.ComponentNotRegisteredException</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.#ctor(Autofac.Core.Service)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.#ctor(Autofac.Core.Service,System.Exception)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.AttachBackingFieldToHelpLink">
            <summary>Присоединение делегатов для эмуляции StubComponentNotRegisteredException.HelpLink как свойства с резервным полем.</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.AttachBackingFieldToSource">
            <summary>Присоединение делегатов для эмуляции StubComponentNotRegisteredException.Source как свойства с резервным полем.</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.DataGet">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.GetBaseException">
            <summary>Задает заглушка Exception.GetBaseException()</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.GetBaseException01">
            <summary>Задает stub Exception.GetBaseException()</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Задает заглушка Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Задает stub Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.HelpLinkGet">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.HelpLinkSetString">
            <summary>Задает stub Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubComponentNotRegisteredException</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.MessageGet">
            <summary>Задает stub DependencyResolutionException.get_Message()</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.SourceGet">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.SourceSetString">
            <summary>Задает stub Exception.set_Source(String value)</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.StackTraceGet">
            <summary>Задает stub Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.ToString">
            <summary>Задает заглушка Exception.ToString()</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.ToString01">
            <summary>Задает stub Exception.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.Data">
            <summary>Задает stub Exception.get_Data()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.HelpLink">
            <summary>Задает stub Exception.get_HelpLink()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.Message">
            <summary>Задает stub DependencyResolutionException.get_Message()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.Source">
            <summary>Задает stub Exception.get_Source()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentNotRegisteredException.StackTrace">
            <summary>Задает stub Exception.get_StackTrace()</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.StubComponentRegistration">
            <summary>Тип заглушки Autofac.Core.Registration.ComponentRegistration</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object},Autofac.Core.IComponentRegistration)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentRegistration.Dispose(System.Boolean)">
            <summary>Задает заглушка ComponentRegistration.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentRegistration.DisposeBoolean">
            <summary>Задает stub ComponentRegistration.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentRegistration.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubComponentRegistration</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentRegistration.ToString">
            <summary>Задает заглушка ComponentRegistration.ToString()</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentRegistration.ToString01">
            <summary>Задает stub ComponentRegistration.ToString()</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentRegistration.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentRegistration.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentRegistration.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.StubComponentRegistry">
            <summary>Тип заглушки Autofac.Core.Registration.ComponentRegistry</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentRegistry.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentRegistry.Dispose(System.Boolean)">
            <summary>Задает заглушка ComponentRegistry.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentRegistry.DisposeBoolean">
            <summary>Задает stub ComponentRegistry.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentRegistry.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubComponentRegistry</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubComponentRegistry.Register(Autofac.Core.IComponentRegistration,System.Boolean)">
            <summary>Задает заглушка ComponentRegistry.Register(IComponentRegistration registration, Boolean preserveDefaults)</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubComponentRegistry.RegisterIComponentRegistrationBoolean">
            <summary>Задает stub ComponentRegistry.Register(IComponentRegistration registration, Boolean preserveDefaults)</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentRegistry.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentRegistry.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Registration.Fakes.StubComponentRegistry.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Registration.Fakes.StubIModuleRegistrar">
            <summary>Тип заглушки Autofac.Core.Registration.IModuleRegistrar</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubIModuleRegistrar.#ctor">
            <summary>Инициализирует новый экземпляр type StubIModuleRegistrar</summary>
        </member>
        <member name="M:Autofac.Core.Registration.Fakes.StubIModuleRegistrar.a::Autofac#Core#Registration#IModuleRegistrar#RegisterModule(Autofac.Core.IModule)">
            <summary>Задает заглушка IModuleRegistrar.RegisterModule(IModule module)</summary>
        </member>
        <member name="F:Autofac.Core.Registration.Fakes.StubIModuleRegistrar.RegisterModuleIModule">
            <summary>Задает stub IModuleRegistrar.RegisterModule(IModule module)</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.Resolving.InstanceLookupBeginningEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs.#ctor(Autofac.Core.Resolving.InstanceLookupBeginningEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs.ConstructorIInstanceLookup">
            <summary>Задает оболочка совместимости InstanceLookupBeginningEventArgs.InstanceLookupBeginningEventArgs(IInstanceLookup instanceLookup)</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs.InstanceLookupGet">
            <summary>Задает оболочка совместимости InstanceLookupBeginningEventArgs.get_InstanceLookup()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupBeginningEventArgs.AllInstances.InstanceLookupGet">
            <summary>Задает оболочка совместимости InstanceLookupBeginningEventArgs.get_InstanceLookup()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs.#ctor(Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs.ConstructorIInstanceLookup">
            <summary>Задает оболочка совместимости InstanceLookupCompletionBeginningEventArgs.InstanceLookupCompletionBeginningEventArgs(IInstanceLookup instanceLookup)</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs.InstanceLookupGet">
            <summary>Задает оболочка совместимости InstanceLookupCompletionBeginningEventArgs.get_InstanceLookup()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionBeginningEventArgs.AllInstances.InstanceLookupGet">
            <summary>Задает оболочка совместимости InstanceLookupCompletionBeginningEventArgs.get_InstanceLookup()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs.#ctor(Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs.ConstructorIInstanceLookup">
            <summary>Задает оболочка совместимости InstanceLookupCompletionEndingEventArgs.InstanceLookupCompletionEndingEventArgs(IInstanceLookup instanceLookup)</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs.InstanceLookupGet">
            <summary>Задает оболочка совместимости InstanceLookupCompletionEndingEventArgs.get_InstanceLookup()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupCompletionEndingEventArgs.AllInstances.InstanceLookupGet">
            <summary>Задает оболочка совместимости InstanceLookupCompletionEndingEventArgs.get_InstanceLookup()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.Resolving.InstanceLookupEndingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.#ctor(Autofac.Core.Resolving.InstanceLookupEndingEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.ConstructorIInstanceLookupBoolean">
            <summary>Задает оболочка совместимости InstanceLookupEndingEventArgs.InstanceLookupEndingEventArgs(IInstanceLookup instanceLookup, Boolean newInstanceActivated)</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.InstanceLookupGet">
            <summary>Задает оболочка совместимости InstanceLookupEndingEventArgs.get_InstanceLookup()</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.NewInstanceActivatedGet">
            <summary>Задает оболочка совместимости InstanceLookupEndingEventArgs.get_NewInstanceActivated()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.AllInstances.InstanceLookupGet">
            <summary>Задает оболочка совместимости InstanceLookupEndingEventArgs.get_InstanceLookup()</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimInstanceLookupEndingEventArgs.AllInstances.NewInstanceActivatedGet">
            <summary>Задает оболочка совместимости InstanceLookupEndingEventArgs.get_NewInstanceActivated()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.Resolving.ResolveOperationBeginningEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs.#ctor(Autofac.Core.Resolving.ResolveOperationBeginningEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs.ConstructorIResolveOperation">
            <summary>Задает оболочка совместимости ResolveOperationBeginningEventArgs.ResolveOperationBeginningEventArgs(IResolveOperation resolveOperation)</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs.ResolveOperationGet">
            <summary>Задает оболочка совместимости ResolveOperationBeginningEventArgs.get_ResolveOperation()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationBeginningEventArgs.AllInstances.ResolveOperationGet">
            <summary>Задает оболочка совместимости ResolveOperationBeginningEventArgs.get_ResolveOperation()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs">
            <summary>Тип оболочки совместимости для Autofac.Core.Resolving.ResolveOperationEndingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.#ctor(Autofac.Core.Resolving.ResolveOperationEndingEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.ConstructorIResolveOperationException">
            <summary>Задает оболочка совместимости ResolveOperationEndingEventArgs.ResolveOperationEndingEventArgs(IResolveOperation resolveOperation, Exception exception)</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.ExceptionGet">
            <summary>Задает оболочка совместимости ResolveOperationEndingEventArgs.get_Exception()</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.ResolveOperationGet">
            <summary>Задает оболочка совместимости ResolveOperationEndingEventArgs.get_ResolveOperation()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.AllInstances.ExceptionGet">
            <summary>Задает оболочка совместимости ResolveOperationEndingEventArgs.get_Exception()</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.ShimResolveOperationEndingEventArgs.AllInstances.ResolveOperationGet">
            <summary>Задает оболочка совместимости ResolveOperationEndingEventArgs.get_ResolveOperation()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.StubIInstanceLookup">
            <summary>Тип заглушки Autofac.Core.Resolving.IInstanceLookup</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubIInstanceLookup.#ctor">
            <summary>Инициализирует новый экземпляр type StubIInstanceLookup</summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Fakes.StubIInstanceLookup.ActivationScopeGet">
            <summary>Задает stub IInstanceLookup.get_ActivationScope()</summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Fakes.StubIInstanceLookup.ComponentRegistrationGet">
            <summary>Задает stub IInstanceLookup.get_ComponentRegistration()</summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Fakes.StubIInstanceLookup.ParametersGet">
            <summary>Задает stub IInstanceLookup.get_Parameters()</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubIInstanceLookup.a::Autofac#Core#Resolving#IInstanceLookup#ActivationScope">
            <summary>Задает stub IInstanceLookup.get_ActivationScope()</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubIInstanceLookup.a::Autofac#Core#Resolving#IInstanceLookup#ComponentRegistration">
            <summary>Задает stub IInstanceLookup.get_ComponentRegistration()</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubIInstanceLookup.a::Autofac#Core#Resolving#IInstanceLookup#Parameters">
            <summary>Задает stub IInstanceLookup.get_Parameters()</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.StubIResolveOperation">
            <summary>Тип заглушки Autofac.Core.Resolving.IResolveOperation</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubIResolveOperation.#ctor">
            <summary>Инициализирует новый экземпляр type StubIResolveOperation</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubIResolveOperation.a::Autofac#Core#Resolving#IResolveOperation#GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Задает заглушка IResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Fakes.StubIResolveOperation.GetOrCreateInstanceISharingLifetimeScopeIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает stub IResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.StubInstanceLookupBeginningEventArgs">
            <summary>Тип заглушки Autofac.Core.Resolving.InstanceLookupBeginningEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubInstanceLookupBeginningEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubInstanceLookupBeginningEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubInstanceLookupBeginningEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupBeginningEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupBeginningEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupBeginningEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionBeginningEventArgs">
            <summary>Тип заглушки Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionBeginningEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionBeginningEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubInstanceLookupCompletionBeginningEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionBeginningEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionBeginningEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionBeginningEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionEndingEventArgs">
            <summary>Тип заглушки Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionEndingEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionEndingEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubInstanceLookupCompletionEndingEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionEndingEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionEndingEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupCompletionEndingEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.StubInstanceLookupEndingEventArgs">
            <summary>Тип заглушки Autofac.Core.Resolving.InstanceLookupEndingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubInstanceLookupEndingEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup,System.Boolean)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubInstanceLookupEndingEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubInstanceLookupEndingEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupEndingEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupEndingEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubInstanceLookupEndingEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.StubResolveOperationBeginningEventArgs">
            <summary>Тип заглушки Autofac.Core.Resolving.ResolveOperationBeginningEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubResolveOperationBeginningEventArgs.#ctor(Autofac.Core.Resolving.IResolveOperation)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubResolveOperationBeginningEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubResolveOperationBeginningEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubResolveOperationBeginningEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubResolveOperationBeginningEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubResolveOperationBeginningEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Fakes.StubResolveOperationEndingEventArgs">
            <summary>Тип заглушки Autofac.Core.Resolving.ResolveOperationEndingEventArgs</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubResolveOperationEndingEventArgs.#ctor(Autofac.Core.Resolving.IResolveOperation,System.Exception)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Fakes.StubResolveOperationEndingEventArgs.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubResolveOperationEndingEventArgs</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubResolveOperationEndingEventArgs.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubResolveOperationEndingEventArgs.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Fakes.StubResolveOperationEndingEventArgs.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimContainerBuilder">
            <summary>Тип оболочки совместимости для Autofac.ContainerBuilder</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimContainerBuilder.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimContainerBuilder.#ctor(Autofac.ContainerBuilder)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimContainerBuilder.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimContainerBuilder.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.BuildContainerBuildOptions">
            <summary>Задает оболочка совместимости ContainerBuilder.Build(ContainerBuildOptions options)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.BuildIComponentRegistryBoolean">
            <summary>Задает оболочка совместимости ContainerBuilder.Build(IComponentRegistry componentRegistry, Boolean excludeDefaultModules)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.Constructor">
            <summary>Задает оболочка совместимости ContainerBuilder.ContainerBuilder()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.RegisterCallbackActionOfIComponentRegistry">
            <summary>Задает оболочка совместимости ContainerBuilder.RegisterCallback(Action`1&lt;IComponentRegistry&gt; configurationCallback)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.RegisterDefaultAdaptersIComponentRegistry">
            <summary>Задает оболочка совместимости ContainerBuilder.RegisterDefaultAdapters(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.StartStartableComponentsIComponentContext">
            <summary>Задает оболочка совместимости ContainerBuilder.StartStartableComponents(IComponentContext componentContext)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.UpdateIComponentRegistry">
            <summary>Задает оболочка совместимости ContainerBuilder.Update(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.UpdateIContainer">
            <summary>Задает оболочка совместимости ContainerBuilder.Update(IContainer container)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.UpdateIContainerContainerBuildOptions">
            <summary>Задает оболочка совместимости ContainerBuilder.Update(IContainer container, ContainerBuildOptions options)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimContainerBuilder.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.AllInstances.BuildContainerBuildOptions">
            <summary>Задает оболочка совместимости ContainerBuilder.Build(ContainerBuildOptions options)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.AllInstances.BuildIComponentRegistryBoolean">
            <summary>Задает оболочка совместимости ContainerBuilder.Build(IComponentRegistry componentRegistry, Boolean excludeDefaultModules)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.AllInstances.RegisterCallbackActionOfIComponentRegistry">
            <summary>Задает оболочка совместимости ContainerBuilder.RegisterCallback(Action`1&lt;IComponentRegistry&gt; configurationCallback)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.AllInstances.RegisterDefaultAdaptersIComponentRegistry">
            <summary>Задает оболочка совместимости ContainerBuilder.RegisterDefaultAdapters(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.AllInstances.UpdateIComponentRegistry">
            <summary>Задает оболочка совместимости ContainerBuilder.Update(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.AllInstances.UpdateIContainer">
            <summary>Задает оболочка совместимости ContainerBuilder.Update(IContainer container)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimContainerBuilder.AllInstances.UpdateIContainerContainerBuildOptions">
            <summary>Задает оболочка совместимости ContainerBuilder.Update(IContainer container, ContainerBuildOptions options)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimModule">
            <summary>Тип оболочки совместимости для Autofac.Module</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModule.#ctor(Autofac.Module)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModule.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModule.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModule.Bind(Autofac.Core.IModule)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AttachToComponentRegistrationIComponentRegistryIComponentRegistration">
            <summary>Задает оболочка совместимости Module.AttachToComponentRegistration(IComponentRegistry componentRegistry, IComponentRegistration registration)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AttachToRegistrationSourceIComponentRegistryIRegistrationSource">
            <summary>Задает оболочка совместимости Module.AttachToRegistrationSource(IComponentRegistry componentRegistry, IRegistrationSource registrationSource)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AttachToRegistrationsIComponentRegistry">
            <summary>Задает оболочка совместимости Module.AttachToRegistrations(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AttachToSourcesIComponentRegistry">
            <summary>Задает оболочка совместимости Module.AttachToSources(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.ConfigureIComponentRegistry">
            <summary>Задает оболочка совместимости Module.Configure(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.Constructor">
            <summary>Задает оболочка совместимости Module.Module()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.LoadContainerBuilder">
            <summary>Задает оболочка совместимости Module.Load(ContainerBuilder builder)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.ThisAssemblyGet">
            <summary>Задает оболочка совместимости Module.get_ThisAssembly()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule._AttachToRegistrationsb__0ObjectComponentRegisteredEventArgs">
            <summary>Задает оболочка совместимости Module.&lt;AttachToRegistrations&gt;b__0(Object sender, ComponentRegisteredEventArgs e)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule._AttachToSourcesb__1ObjectRegistrationSourceAddedEventArgs">
            <summary>Задает оболочка совместимости Module.&lt;AttachToSources&gt;b__1(Object sender, RegistrationSourceAddedEventArgs e)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimModule.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AllInstances.AttachToComponentRegistrationIComponentRegistryIComponentRegistration">
            <summary>Задает оболочка совместимости Module.AttachToComponentRegistration(IComponentRegistry componentRegistry, IComponentRegistration registration)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AllInstances.AttachToRegistrationSourceIComponentRegistryIRegistrationSource">
            <summary>Задает оболочка совместимости Module.AttachToRegistrationSource(IComponentRegistry componentRegistry, IRegistrationSource registrationSource)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AllInstances.AttachToRegistrationsIComponentRegistry">
            <summary>Задает оболочка совместимости Module.AttachToRegistrations(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AllInstances.AttachToSourcesIComponentRegistry">
            <summary>Задает оболочка совместимости Module.AttachToSources(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AllInstances.ConfigureIComponentRegistry">
            <summary>Задает оболочка совместимости Module.Configure(IComponentRegistry componentRegistry)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AllInstances.LoadContainerBuilder">
            <summary>Задает оболочка совместимости Module.Load(ContainerBuilder builder)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AllInstances.ThisAssemblyGet">
            <summary>Задает оболочка совместимости Module.get_ThisAssembly()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AllInstances._AttachToRegistrationsb__0ObjectComponentRegisteredEventArgs">
            <summary>Задает оболочка совместимости Module.&lt;AttachToRegistrations&gt;b__0(Object sender, ComponentRegisteredEventArgs e)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModule.AllInstances._AttachToSourcesb__1ObjectRegistrationSourceAddedEventArgs">
            <summary>Задает оболочка совместимости Module.&lt;AttachToSources&gt;b__1(Object sender, RegistrationSourceAddedEventArgs e)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimModuleRegistrationExtensions">
            <summary>Тип оболочки совместимости для Autofac.ModuleRegistrationExtensions</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModuleRegistrationExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModuleRegistrationExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModuleRegistrationExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModuleRegistrationExtensions.RegisterAssemblyModulesOf1ContainerBuilderAssemblyArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.Reflection.Assembly[],Autofac.Core.Registration.IModuleRegistrar})">
            <summary>Задает оболочка совместимости ModuleRegistrationExtensions.RegisterAssemblyModules(ContainerBuilder builder, Assembly[] assemblies)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModuleRegistrationExtensions.RegisterAssemblyModulesOf1IModuleRegistrarAssemblyArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Core.Registration.IModuleRegistrar,System.Reflection.Assembly[],Autofac.Core.Registration.IModuleRegistrar})">
            <summary>Задает оболочка совместимости ModuleRegistrationExtensions.RegisterAssemblyModules(IModuleRegistrar registrar, Assembly[] assemblies)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModuleRegistrationExtensions.RegisterModuleOf1ContainerBuilder``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,Autofac.Core.Registration.IModuleRegistrar})">
            <summary>Задает оболочка совместимости ModuleRegistrationExtensions.RegisterModule(ContainerBuilder builder)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimModuleRegistrationExtensions.RegisterModuleOf1IModuleRegistrar``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Core.Registration.IModuleRegistrar,Autofac.Core.Registration.IModuleRegistrar})">
            <summary>Задает оболочка совместимости ModuleRegistrationExtensions.RegisterModule(IModuleRegistrar registrar)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModuleRegistrationExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModuleRegistrationExtensions.RegisterAssemblyModulesContainerBuilderAssemblyArray">
            <summary>Задает оболочка совместимости ModuleRegistrationExtensions.RegisterAssemblyModules(ContainerBuilder builder, Assembly[] assemblies)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModuleRegistrationExtensions.RegisterAssemblyModulesContainerBuilderTypeAssemblyArray">
            <summary>Задает оболочка совместимости ModuleRegistrationExtensions.RegisterAssemblyModules(ContainerBuilder builder, Type moduleType, Assembly[] assemblies)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModuleRegistrationExtensions.RegisterAssemblyModulesIModuleRegistrarAssemblyArray">
            <summary>Задает оболочка совместимости ModuleRegistrationExtensions.RegisterAssemblyModules(IModuleRegistrar registrar, Assembly[] assemblies)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModuleRegistrationExtensions.RegisterAssemblyModulesIModuleRegistrarTypeAssemblyArray">
            <summary>Задает оболочка совместимости ModuleRegistrationExtensions.RegisterAssemblyModules(IModuleRegistrar registrar, Type moduleType, Assembly[] assemblies)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimModuleRegistrationExtensions.RegisterModuleContainerBuilderIModule">
            <summary>Задает оболочка совместимости ModuleRegistrationExtensions.RegisterModule(ContainerBuilder builder, IModule module)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimNamedParameter">
            <summary>Тип оболочки совместимости для Autofac.NamedParameter</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimNamedParameter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimNamedParameter.#ctor(Autofac.NamedParameter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimNamedParameter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimNamedParameter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimNamedParameter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimNamedParameter.ConstructorStringObject">
            <summary>Задает оболочка совместимости NamedParameter.NamedParameter(String name, Object value)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimNamedParameter.NameGet">
            <summary>Задает оболочка совместимости NamedParameter.get_Name()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimNamedParameter.NameSetString">
            <summary>Задает оболочка совместимости NamedParameter.set_Name(String value)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimNamedParameter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimNamedParameter.AllInstances.NameGet">
            <summary>Задает оболочка совместимости NamedParameter.get_Name()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimNamedParameter.AllInstances.NameSetString">
            <summary>Задает оболочка совместимости NamedParameter.set_Name(String value)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimParameterExtensions">
            <summary>Тип оболочки совместимости для Autofac.ParameterExtensions</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimParameterExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimParameterExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimParameterExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimParameterExtensions.ConstantValueOf2IEnumerableOfParameterFuncOfM0Boolean``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Func{``0,System.Boolean},``1})">
            <summary>Задает оболочка совместимости ParameterExtensions.ConstantValue(IEnumerable`1&lt;Parameter&gt; parameters, Func`2&lt;!!0,Boolean&gt; predicate)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimParameterExtensions.NamedOf1IEnumerableOfParameterString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String,``0})">
            <summary>Задает оболочка совместимости ParameterExtensions.Named(IEnumerable`1&lt;Parameter&gt; parameters, String name)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimParameterExtensions.PositionalOf1IEnumerableOfParameterInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32,``0})">
            <summary>Задает оболочка совместимости ParameterExtensions.Positional(IEnumerable`1&lt;Parameter&gt; parameters, Int32 position)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimParameterExtensions.TypedAsOf1IEnumerableOfParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>Задает оболочка совместимости ParameterExtensions.TypedAs(IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimParameterExtensions._ConstantValueb__7Of2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Object})">
            <summary>Задает оболочка совместимости ParameterExtensions.&lt;ConstantValue&gt;b__7(!!0 p)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimParameterExtensions._TypedAsb__6Of1TypedParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.TypedParameter,System.Boolean})">
            <summary>Задает оболочка совместимости ParameterExtensions.&lt;TypedAs&gt;b__6(TypedParameter c)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimParameterExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimPositionalParameter">
            <summary>Тип оболочки совместимости для Autofac.PositionalParameter</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimPositionalParameter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimPositionalParameter.#ctor(Autofac.PositionalParameter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimPositionalParameter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimPositionalParameter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimPositionalParameter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimPositionalParameter.ConstructorInt32Object">
            <summary>Задает оболочка совместимости PositionalParameter.PositionalParameter(Int32 position, Object value)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimPositionalParameter.PositionGet">
            <summary>Задает оболочка совместимости PositionalParameter.get_Position()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimPositionalParameter.PositionSetInt32">
            <summary>Задает оболочка совместимости PositionalParameter.set_Position(Int32 value)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimPositionalParameter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimPositionalParameter.AllInstances.PositionGet">
            <summary>Задает оболочка совместимости PositionalParameter.get_Position()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimPositionalParameter.AllInstances.PositionSetInt32">
            <summary>Задает оболочка совместимости PositionalParameter.set_Position(Int32 value)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimRegistrationExtensions">
            <summary>Тип оболочки совместимости для Autofac.RegistrationExtensions</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsClosedTypesOfOf3IRegistrationBuilderOfM0M1M2Type``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AsClosedTypesOf(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Type openGenericServiceType)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsImplementedInterfacesOf1IRegistrationBuilderOfM0ReflectionActivatorDataDynamicRegistrationStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle},Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AsImplementedInterfaces(IRegistrationBuilder`3&lt;!!0,ReflectionActivatorData,DynamicRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsImplementedInterfacesOf1IRegistrationBuilderOfM0ScanningActivatorDataDynamicRegistrationStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AsImplementedInterfaces(IRegistrationBuilder`3&lt;!!0,ScanningActivatorData,DynamicRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsImplementedInterfacesOf2IRegistrationBuilderOfM0M1SingleRegistrationStyle``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle},Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AsImplementedInterfaces(IRegistrationBuilder`3&lt;!!0,!!1,SingleRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsOf3IRegistrationBuilderOfM0M1M2FuncOfTypeIEnumerableOfService``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Service}},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.As(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`2&lt;Type,IEnumerable`1&lt;Service&gt;&gt; serviceMapping)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsOf3IRegistrationBuilderOfM0M1M2FuncOfTypeIEnumerableOfType``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.As(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`2&lt;Type,IEnumerable`1&lt;Type&gt;&gt; serviceMapping)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsOf3IRegistrationBuilderOfM0M1M2FuncOfTypeService``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,Autofac.Core.Service},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.As(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`2&lt;Type,Service&gt; serviceMapping)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsOf3IRegistrationBuilderOfM0M1M2FuncOfTypeType``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Type},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.As(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`2&lt;Type,Type&gt; serviceMapping)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsSelfOf1IRegistrationBuilderOfM0ReflectionActivatorDataDynamicRegistrationStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle},Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AsSelf(IRegistrationBuilder`3&lt;!!0,ReflectionActivatorData,DynamicRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsSelfOf1IRegistrationBuilderOfM0ScanningActivatorDataDynamicRegistrationStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AsSelf(IRegistrationBuilder`3&lt;!!0,ScanningActivatorData,DynamicRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AsSelfOf2IRegistrationBuilderOfM0M1SingleRegistrationStyle``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle},Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AsSelf(IRegistrationBuilder`3&lt;!!0,!!1,SingleRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AssignableToOf1IRegistrationBuilderOfObjectScanningActivatorDataDynamicRegistrationStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AssignableTo(IRegistrationBuilder`3&lt;Object,ScanningActivatorData,DynamicRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AssignableToOf3IRegistrationBuilderOfM0M1M2Type``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AssignableTo(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Type type)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.AutoActivateOf3IRegistrationBuilderOfM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.AutoActivate(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.ExceptOf1IRegistrationBuilderOfObjectScanningActivatorDataDynamicRegistrationStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Except(IRegistrationBuilder`3&lt;Object,ScanningActivatorData,DynamicRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.ExceptOf1IRegistrationBuilderOfObjectScanningActivatorDataDynamicRegistrationStyleActionOfIRegistrationBuilderOfM0ConcreteReflectionActivatorDataSingleRegistrationStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Action{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle}},Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Except(IRegistrationBuilder`3&lt;Object,ScanningActivatorData,DynamicRegistrationStyle&gt; registration, Action`1&lt;IRegistrationBuilder`3&lt;!!0,ConcreteReflectionActivatorData,SingleRegistrationStyle&gt;&gt; customizedRegistration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.FindConstructorsWithOf3IRegistrationBuilderOfM0M1M2FuncOfTypeConstructorInfoArray``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Reflection.ConstructorInfo[]},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.FindConstructorsWith(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`2&lt;Type,ConstructorInfo[]&gt; finder)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.FindConstructorsWithOf3IRegistrationBuilderOfM0M1M2IConstructorFinder``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorFinder,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.FindConstructorsWith(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, IConstructorFinder constructorFinder)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.InNamespaceOf3IRegistrationBuilderOfM0M1M2String``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.InNamespace(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, String ns)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.InNamespaceOfOf1IRegistrationBuilderOfObjectScanningActivatorDataDynamicRegistrationStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.InNamespaceOf(IRegistrationBuilder`3&lt;Object,ScanningActivatorData,DynamicRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.KeyedOf1IRegistrationBuilderOfObjectScanningActivatorDataDynamicRegistrationStyleFuncOfTypeObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.Object},Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Keyed(IRegistrationBuilder`3&lt;Object,ScanningActivatorData,DynamicRegistrationStyle&gt; registration, Func`2&lt;Type,Object&gt; serviceKeyMapping)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.KeyedOf3IRegistrationBuilderOfM0M1M2FuncOfTypeObjectType``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Object},System.Type,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Keyed(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`2&lt;Type,Object&gt; serviceKeyMapping, Type serviceType)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.NamedOf1IRegistrationBuilderOfObjectScanningActivatorDataDynamicRegistrationStyleFuncOfTypeString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.String},Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Named(IRegistrationBuilder`3&lt;Object,ScanningActivatorData,DynamicRegistrationStyle&gt; registration, Func`2&lt;Type,String&gt; serviceNameMapping)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.NamedOf3IRegistrationBuilderOfM0M1M2FuncOfTypeStringType``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.String},System.Type,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Named(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`2&lt;Type,String&gt; serviceNameMapping, Type serviceType)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.OnRegisteredOf2IRegistrationBuilderOfM0ScanningActivatorDataM1ActionOfComponentRegisteredEventArgs``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1},System.Action{Autofac.Core.ComponentRegisteredEventArgs},Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.OnRegistered(IRegistrationBuilder`3&lt;!!0,ScanningActivatorData,!!1&gt; registration, Action`1&lt;ComponentRegisteredEventArgs&gt; handler)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.OnRegisteredOf3IRegistrationBuilderOfM0M1M2ActionOfComponentRegisteredEventArgs``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{Autofac.Core.ComponentRegisteredEventArgs},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.OnRegistered(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Action`1&lt;ComponentRegisteredEventArgs&gt; handler)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.OnReleaseOf3IRegistrationBuilderOfM0M1M2ActionOfM0``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{``0},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.OnRelease(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Action`1&lt;!!0&gt; releaseAction)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.PreserveExistingDefaultsOf2IRegistrationBuilderOfM0ScanningActivatorDataM1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1},Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.PreserveExistingDefaults(IRegistrationBuilder`3&lt;!!0,ScanningActivatorData,!!1&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.PreserveExistingDefaultsOf3IRegistrationBuilderOfM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.PreserveExistingDefaults(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterAdapterOf2ContainerBuilderFuncOfIComponentContextIEnumerableOfParameterM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``1},Autofac.Builder.IRegistrationBuilder{``1,Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterAdapter(ContainerBuilder builder, Func`4&lt;IComponentContext,IEnumerable`1&lt;Parameter&gt;,!!0,!!1&gt; adapter)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterAdapterOf2ContainerBuilderFuncOfIComponentContextM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1},Autofac.Builder.IRegistrationBuilder{``1,Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterAdapter(ContainerBuilder builder, Func`3&lt;IComponentContext,!!0,!!1&gt; adapter)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterAdapterOf2ContainerBuilderFuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.Func{``0,``1},Autofac.Builder.IRegistrationBuilder{``1,Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterAdapter(ContainerBuilder builder, Func`2&lt;!!0,!!1&gt; adapter)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterDecoratorOf1ContainerBuilderFuncOfIComponentContextIEnumerableOfParameterM0M0ObjectObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``0},System.Object,System.Object,Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterDecorator(ContainerBuilder builder, Func`4&lt;IComponentContext,IEnumerable`1&lt;Parameter&gt;,!!0,!!0&gt; decorator, Object fromKey, Object toKey)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterDecoratorOf1ContainerBuilderFuncOfIComponentContextM0M0ObjectObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``0},System.Object,System.Object,Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterDecorator(ContainerBuilder builder, Func`3&lt;IComponentContext,!!0,!!0&gt; decorator, Object fromKey, Object toKey)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterDecoratorOf1ContainerBuilderFuncOfM0M0ObjectObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.Func{``0,``0},System.Object,System.Object,Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterDecorator(ContainerBuilder builder, Func`2&lt;!!0,!!0&gt; decorator, Object fromKey, Object toKey)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterInstanceOf1ContainerBuilderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,``0,Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.SimpleActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterInstance(ContainerBuilder builder, !!0 instance)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterOf1ContainerBuilderFuncOfIComponentContextIEnumerableOfParameterM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0},Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.SimpleActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Register(ContainerBuilder builder, Func`3&lt;IComponentContext,IEnumerable`1&lt;Parameter&gt;,!!0&gt; delegate)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterOf1ContainerBuilderFuncOfIComponentContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0},Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.SimpleActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Register(ContainerBuilder builder, Func`2&lt;IComponentContext,!!0&gt; delegate)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.RegisterTypeOf1ContainerBuilder``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.ContainerBuilder,Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterType(ContainerBuilder builder)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.TargetingOf3IRegistrationBuilderOfM0M1M2IComponentRegistration``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.IComponentRegistration,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Targeting(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, IComponentRegistration target)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.UsingConstructorOf3IRegistrationBuilderOfM0M1M2ExpressionOfFuncOfM0``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Linq.Expressions.Expression{System.Func{``0}},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.UsingConstructor(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Expression`1&lt;Func`1&lt;!!0&gt;&gt; constructorSelector)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.UsingConstructorOf3IRegistrationBuilderOfM0M1M2IConstructorSelector``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorSelector,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.UsingConstructor(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, IConstructorSelector constructorSelector)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.UsingConstructorOf3IRegistrationBuilderOfM0M1M2TypeArray``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[],Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.UsingConstructor(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Type[] signature)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WhereOf3IRegistrationBuilderOfM0M1M2FuncOfTypeBoolean``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Boolean},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.Where(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`2&lt;Type,Boolean&gt; predicate)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithMetadataFromOf1IRegistrationBuilderOfObjectScanningActivatorDataDynamicRegistrationStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithMetadataFrom(IRegistrationBuilder`3&lt;Object,ScanningActivatorData,DynamicRegistrationStyle&gt; registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithMetadataOf3IRegistrationBuilderOfM0M1M2FuncOfTypeIEnumerableOfKeyValuePairOfStringObject``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithMetadata(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`2&lt;Type,IEnumerable`1&lt;KeyValuePair`2&lt;String,Object&gt;&gt;&gt; metadataMapping)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithMetadataOf3IRegistrationBuilderOfM0M1M2StringFuncOfTypeObject``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Func{System.Type,System.Object},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithMetadata(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, String metadataKey, Func`2&lt;Type,Object&gt; metadataValueMapping)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithParameterOf3IRegistrationBuilderOfM0M1M2FuncOfParameterInfoIComponentContextBooleanFuncOfParameterInfoIComponentContextObject``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Object},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithParameter(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Func`3&lt;ParameterInfo,IComponentContext,Boolean&gt; parameterSelector, Func`3&lt;ParameterInfo,IComponentContext,Object&gt; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithParameterOf3IRegistrationBuilderOfM0M1M2Parameter``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Parameter,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithParameter(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Parameter parameter)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithParameterOf3IRegistrationBuilderOfM0M1M2StringObject``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithParameter(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, String parameterName, Object parameterValue)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithParametersOf3IRegistrationBuilderOfM0M1M2IEnumerableOfParameter``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithParameters(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithPropertiesOf3IRegistrationBuilderOfM0M1M2IEnumerableOfParameter``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithProperties(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, IEnumerable`1&lt;Parameter&gt; properties)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithPropertyOf3IRegistrationBuilderOfM0M1M2Parameter``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Parameter,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithProperty(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, Parameter property)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions.WithPropertyOf3IRegistrationBuilderOfM0M1M2StringObject``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object,Autofac.Builder.IRegistrationBuilder{``0,``1,``2}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.WithProperty(IRegistrationBuilder`3&lt;!!0,!!1,!!2&gt; registration, String propertyName, Object propertyValue)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions._AsImplementedInterfacesb__34Of1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>Задает оболочка совместимости RegistrationExtensions.&lt;AsImplementedInterfaces&gt;b__34(Type t)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions._AsSelfb__20Of1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Type})">
            <summary>Задает оболочка совместимости RegistrationExtensions.&lt;AsSelf&gt;b__20(Type t)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions._Exceptb__3eOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Boolean})">
            <summary>Задает оболочка совместимости RegistrationExtensions.&lt;Except&gt;b__3e(Type t)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions._UsingConstructorb__37Of3ParameterInfo``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Reflection.ParameterInfo,System.Type})">
            <summary>Задает оболочка совместимости RegistrationExtensions.&lt;UsingConstructor&gt;b__37(ParameterInfo p)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimRegistrationExtensions._WithMetadataFromb__24Of1PropertyInfo``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>Задает оболочка совместимости RegistrationExtensions.&lt;WithMetadataFrom&gt;b__24(PropertyInfo pi)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions.GetImplementedInterfacesType">
            <summary>Задает оболочка совместимости RegistrationExtensions.GetImplementedInterfaces(Type type)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions.RegisterAssemblyTypesContainerBuilderAssemblyArray">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterAssemblyTypes(ContainerBuilder builder, Assembly[] assemblies)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions.RegisterComponentContainerBuilderIComponentRegistration">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterComponent(ContainerBuilder builder, IComponentRegistration registration)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions.RegisterGenericContainerBuilderType">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterGeneric(ContainerBuilder builder, Type implementer)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions.RegisterGenericDecoratorContainerBuilderTypeTypeObjectObject">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterGenericDecorator(ContainerBuilder builder, Type decoratorType, Type decoratedServiceType, Object fromKey, Object toKey)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions.RegisterSourceContainerBuilderIRegistrationSource">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterSource(ContainerBuilder builder, IRegistrationSource registrationSource)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions.RegisterTypeContainerBuilderType">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterType(ContainerBuilder builder, Type implementationType)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions.RegisterTypesContainerBuilderTypeArray">
            <summary>Задает оболочка совместимости RegistrationExtensions.RegisterTypes(ContainerBuilder builder, Type[] types)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimRegistrationExtensions._GetImplementedInterfacesb__35Type">
            <summary>Задает оболочка совместимости RegistrationExtensions.&lt;GetImplementedInterfaces&gt;b__35(Type i)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimResolutionExtensions">
            <summary>Тип оболочки совместимости для Autofac.ResolutionExtensions</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.InjectPropertiesOf1IComponentContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,``0,``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.InjectProperties(IComponentContext context, !!0 instance)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.InjectUnsetPropertiesOf1IComponentContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,``0,``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.InjectUnsetProperties(IComponentContext context, !!0 instance)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.IsRegisteredOf1IComponentContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Boolean})">
            <summary>Задает оболочка совместимости ResolutionExtensions.IsRegistered(IComponentContext context)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.IsRegisteredWithKeyOf1IComponentContextObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Object,System.Boolean})">
            <summary>Задает оболочка совместимости ResolutionExtensions.IsRegisteredWithKey(IComponentContext context, Object serviceKey)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.IsRegisteredWithNameOf1IComponentContextString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.String,System.Boolean})">
            <summary>Задает оболочка совместимости ResolutionExtensions.IsRegisteredWithName(IComponentContext context, String serviceName)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveKeyedOf1IComponentContextObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Object,``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveKeyed(IComponentContext context, Object serviceKey)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveKeyedOf1IComponentContextObjectIEnumerableOfParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveKeyed(IComponentContext context, Object serviceKey, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveKeyedOf1IComponentContextObjectParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Object,Autofac.Core.Parameter[],``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveKeyed(IComponentContext context, Object serviceKey, Parameter[] parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveNamedOf1IComponentContextString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.String,``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveNamed(IComponentContext context, String serviceName)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveNamedOf1IComponentContextStringIEnumerableOfParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveNamed(IComponentContext context, String serviceName, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveNamedOf1IComponentContextStringParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.String,Autofac.Core.Parameter[],``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveNamed(IComponentContext context, String serviceName, Parameter[] parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOf1IComponentContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.Resolve(IComponentContext context)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOf1IComponentContextIEnumerableOfParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.Resolve(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOf1IComponentContextParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,Autofac.Core.Parameter[],``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.Resolve(IComponentContext context, Parameter[] parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalKeyedOf1IComponentContextObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Object,``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptionalKeyed(IComponentContext context, Object serviceKey)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalKeyedOf1IComponentContextObjectIEnumerableOfParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptionalKeyed(IComponentContext context, Object serviceKey, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalKeyedOf1IComponentContextObjectParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Object,Autofac.Core.Parameter[],``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptionalKeyed(IComponentContext context, Object serviceKey, Parameter[] parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalNamedOf1IComponentContextString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.String,``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptionalNamed(IComponentContext context, String serviceName)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalNamedOf1IComponentContextStringIEnumerableOfParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptionalNamed(IComponentContext context, String serviceName, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalNamedOf1IComponentContextStringParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.String,Autofac.Core.Parameter[],``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptionalNamed(IComponentContext context, String serviceName, Parameter[] parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalOf1IComponentContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptional(IComponentContext context)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalOf1IComponentContextIEnumerableOfParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptional(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalOf1IComponentContextParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,Autofac.Core.Parameter[],``0})">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptional(IComponentContext context, Parameter[] parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimResolutionExtensions.TryResolveOf1IComponentContextM0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{Autofac.IComponentContext,``0,System.Boolean})">
            <summary>Задает оболочка совместимости ResolutionExtensions.TryResolve(IComponentContext context, !!0&amp; instance)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.IsRegisteredIComponentContextType">
            <summary>Задает оболочка совместимости ResolutionExtensions.IsRegistered(IComponentContext context, Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.IsRegisteredServiceIComponentContextService">
            <summary>Задает оболочка совместимости ResolutionExtensions.IsRegisteredService(IComponentContext context, Service service)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.IsRegisteredWithKeyIComponentContextObjectType">
            <summary>Задает оболочка совместимости ResolutionExtensions.IsRegisteredWithKey(IComponentContext context, Object serviceKey, Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.IsRegisteredWithNameIComponentContextStringType">
            <summary>Задает оболочка совместимости ResolutionExtensions.IsRegisteredWithName(IComponentContext context, String serviceName, Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveIComponentContextType">
            <summary>Задает оболочка совместимости ResolutionExtensions.Resolve(IComponentContext context, Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveIComponentContextTypeIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ResolutionExtensions.Resolve(IComponentContext context, Type serviceType, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveIComponentContextTypeParameterArray">
            <summary>Задает оболочка совместимости ResolutionExtensions.Resolve(IComponentContext context, Type serviceType, Parameter[] parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveKeyedIComponentContextObjectType">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveKeyed(IComponentContext context, Object serviceKey, Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveKeyedIComponentContextObjectTypeIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveKeyed(IComponentContext context, Object serviceKey, Type serviceType, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveKeyedIComponentContextObjectTypeParameterArray">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveKeyed(IComponentContext context, Object serviceKey, Type serviceType, Parameter[] parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveNamedIComponentContextStringType">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveNamed(IComponentContext context, String serviceName, Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveNamedIComponentContextStringTypeIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveNamed(IComponentContext context, String serviceName, Type serviceType, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveNamedIComponentContextStringTypeParameterArray">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveNamed(IComponentContext context, String serviceName, Type serviceType, Parameter[] parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalIComponentContextType">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptional(IComponentContext context, Type serviceType)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalIComponentContextTypeIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptional(IComponentContext context, Type serviceType, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalIComponentContextTypeParameterArray">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptional(IComponentContext context, Type serviceType, Parameter[] parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalServiceIComponentContextService">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptionalService(IComponentContext context, Service service)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalServiceIComponentContextServiceIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptionalService(IComponentContext context, Service service, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveOptionalServiceIComponentContextServiceParameterArray">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveOptionalService(IComponentContext context, Service service, Parameter[] parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveServiceIComponentContextService">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveService(IComponentContext context, Service service)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveServiceIComponentContextServiceIEnumerableOfParameter">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveService(IComponentContext context, Service service, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.ResolveServiceIComponentContextServiceParameterArray">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolveService(IComponentContext context, Service service, Parameter[] parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.StaticConstructor">
            <summary>Задает оболочка совместимости ResolutionExtensions.ResolutionExtensions()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.TryResolveIComponentContextTypeObjectOut">
            <summary>Задает оболочка совместимости ResolutionExtensions.TryResolve(IComponentContext context, Type serviceType, Object&amp; instance)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.TryResolveKeyedIComponentContextObjectTypeObjectOut">
            <summary>Задает оболочка совместимости ResolutionExtensions.TryResolveKeyed(IComponentContext context, Object serviceKey, Type serviceType, Object&amp; instance)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.TryResolveNamedIComponentContextStringTypeObjectOut">
            <summary>Задает оболочка совместимости ResolutionExtensions.TryResolveNamed(IComponentContext context, String serviceName, Type serviceType, Object&amp; instance)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.TryResolveServiceIComponentContextServiceIEnumerableOfParameterObjectOut">
            <summary>Задает оболочка совместимости ResolutionExtensions.TryResolveService(IComponentContext context, Service service, IEnumerable`1&lt;Parameter&gt; parameters, Object&amp; instance)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimResolutionExtensions.TryResolveServiceIComponentContextServiceObjectOut">
            <summary>Задает оболочка совместимости ResolutionExtensions.TryResolveService(IComponentContext context, Service service, Object&amp; instance)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimTypeExtensions">
            <summary>Тип оболочки совместимости для Autofac.TypeExtensions</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypeExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypeExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypeExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypeExtensions.IsAssignableToOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Boolean})">
            <summary>Задает оболочка совместимости TypeExtensions.IsAssignableTo(Type this)</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypeExtensions.IsInNamespaceOfOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Boolean})">
            <summary>Задает оболочка совместимости TypeExtensions.IsInNamespaceOf(Type this)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimTypeExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimTypeExtensions.IsClosedTypeOfTypeType">
            <summary>Задает оболочка совместимости TypeExtensions.IsClosedTypeOf(Type this, Type openGeneric)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimTypeExtensions.IsInNamespaceTypeString">
            <summary>Задает оболочка совместимости TypeExtensions.IsInNamespace(Type this, String namespace)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimTypedParameter">
            <summary>Тип оболочки совместимости для Autofac.TypedParameter</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypedParameter.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypedParameter.#ctor(Autofac.TypedParameter)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypedParameter.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypedParameter.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Fakes.ShimTypedParameter.FromOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Autofac.TypedParameter})">
            <summary>Задает оболочка совместимости TypedParameter.From(!!0 value)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimTypedParameter.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimTypedParameter.ConstructorTypeObject">
            <summary>Задает оболочка совместимости TypedParameter.TypedParameter(Type type, Object value)</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimTypedParameter.TypeGet">
            <summary>Задает оболочка совместимости TypedParameter.get_Type()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimTypedParameter.TypeSetType">
            <summary>Задает оболочка совместимости TypedParameter.set_Type(Type value)</summary>
        </member>
        <member name="T:Autofac.Fakes.ShimTypedParameter.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimTypedParameter.AllInstances.TypeGet">
            <summary>Задает оболочка совместимости TypedParameter.get_Type()</summary>
        </member>
        <member name="P:Autofac.Fakes.ShimTypedParameter.AllInstances.TypeSetType">
            <summary>Задает оболочка совместимости TypedParameter.set_Type(Type value)</summary>
        </member>
        <member name="T:Autofac.Fakes.StubContainerBuilder">
            <summary>Тип заглушки Autofac.ContainerBuilder</summary>
        </member>
        <member name="M:Autofac.Fakes.StubContainerBuilder.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Fakes.StubContainerBuilder.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubContainerBuilder</summary>
        </member>
        <member name="M:Autofac.Fakes.StubContainerBuilder.RegisterCallback(System.Action{Autofac.Core.IComponentRegistry})">
            <summary>Задает заглушка ContainerBuilder.RegisterCallback(Action`1&lt;IComponentRegistry&gt; configurationCallback)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubContainerBuilder.RegisterCallbackActionOfIComponentRegistry">
            <summary>Задает stub ContainerBuilder.RegisterCallback(Action`1&lt;IComponentRegistry&gt; configurationCallback)</summary>
        </member>
        <member name="P:Autofac.Fakes.StubContainerBuilder.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Fakes.StubContainerBuilder.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Fakes.StubContainerBuilder.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Fakes.StubIComponentContext">
            <summary>Тип заглушки Autofac.IComponentContext</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIComponentContext.#ctor">
            <summary>Инициализирует новый экземпляр type StubIComponentContext</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIComponentContext.a::Autofac#IComponentContext#ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Задает заглушка IComponentContext.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIComponentContext.ComponentRegistryGet">
            <summary>Задает stub IComponentContext.get_ComponentRegistry()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIComponentContext.ResolveComponentIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает stub IComponentContext.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Fakes.StubIComponentContext.a::Autofac#IComponentContext#ComponentRegistry">
            <summary>Задает stub IComponentContext.get_ComponentRegistry()</summary>
        </member>
        <member name="T:Autofac.Fakes.StubIContainer">
            <summary>Тип заглушки Autofac.IContainer</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIContainer.#ctor">
            <summary>Инициализирует новый экземпляр type StubIContainer</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIContainer.a::Autofac#IComponentContext#ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Задает заглушка IComponentContext.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIContainer.a::Autofac#ILifetimeScope#BeginLifetimeScope">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope()</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIContainer.a::Autofac#ILifetimeScope#BeginLifetimeScope(System.Object)">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIContainer.a::Autofac#ILifetimeScope#BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIContainer.a::Autofac#ILifetimeScope#BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIContainer.BeginLifetimeScope">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIContainer.BeginLifetimeScopeActionOfContainerBuilder">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIContainer.BeginLifetimeScopeObject">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIContainer.BeginLifetimeScopeObjectActionOfContainerBuilder">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIContainer.ComponentRegistryGet">
            <summary>Задает stub IComponentContext.get_ComponentRegistry()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIContainer.Dispose">
            <summary>Задает stub IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIContainer.DisposerGet">
            <summary>Задает stub ILifetimeScope.get_Disposer()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIContainer.ResolveComponentIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает stub IComponentContext.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIContainer.global::System#IDisposable#Dispose">
            <summary>Задает заглушка IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIContainer.TagGet">
            <summary>Задает stub ILifetimeScope.get_Tag()</summary>
        </member>
        <member name="P:Autofac.Fakes.StubIContainer.a::Autofac#IComponentContext#ComponentRegistry">
            <summary>Задает stub IComponentContext.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Fakes.StubIContainer.a::Autofac#ILifetimeScope#Disposer">
            <summary>Задает stub ILifetimeScope.get_Disposer()</summary>
        </member>
        <member name="P:Autofac.Fakes.StubIContainer.a::Autofac#ILifetimeScope#Tag">
            <summary>Задает stub ILifetimeScope.get_Tag()</summary>
        </member>
        <member name="T:Autofac.Fakes.StubILifetimeScope">
            <summary>Тип заглушки Autofac.ILifetimeScope</summary>
        </member>
        <member name="M:Autofac.Fakes.StubILifetimeScope.#ctor">
            <summary>Инициализирует новый экземпляр type StubILifetimeScope</summary>
        </member>
        <member name="M:Autofac.Fakes.StubILifetimeScope.a::Autofac#IComponentContext#ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Задает заглушка IComponentContext.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubILifetimeScope.a::Autofac#ILifetimeScope#BeginLifetimeScope">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope()</summary>
        </member>
        <member name="M:Autofac.Fakes.StubILifetimeScope.a::Autofac#ILifetimeScope#BeginLifetimeScope(System.Object)">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubILifetimeScope.a::Autofac#ILifetimeScope#BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubILifetimeScope.a::Autofac#ILifetimeScope#BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
            <summary>Задает заглушка ILifetimeScope.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubILifetimeScope.BeginLifetimeScope">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubILifetimeScope.BeginLifetimeScopeActionOfContainerBuilder">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope(Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubILifetimeScope.BeginLifetimeScopeObject">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope(Object tag)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubILifetimeScope.BeginLifetimeScopeObjectActionOfContainerBuilder">
            <summary>Задает stub ILifetimeScope.BeginLifetimeScope(Object tag, Action`1&lt;ContainerBuilder&gt; configurationAction)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubILifetimeScope.ComponentRegistryGet">
            <summary>Задает stub IComponentContext.get_ComponentRegistry()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubILifetimeScope.Dispose">
            <summary>Задает stub IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubILifetimeScope.DisposerGet">
            <summary>Задает stub ILifetimeScope.get_Disposer()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubILifetimeScope.ResolveComponentIComponentRegistrationIEnumerableOfParameter">
            <summary>Задает stub IComponentContext.ResolveComponent(IComponentRegistration registration, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubILifetimeScope.global::System#IDisposable#Dispose">
            <summary>Задает заглушка IDisposable.Dispose()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubILifetimeScope.TagGet">
            <summary>Задает stub ILifetimeScope.get_Tag()</summary>
        </member>
        <member name="P:Autofac.Fakes.StubILifetimeScope.a::Autofac#IComponentContext#ComponentRegistry">
            <summary>Задает stub IComponentContext.get_ComponentRegistry()</summary>
        </member>
        <member name="P:Autofac.Fakes.StubILifetimeScope.a::Autofac#ILifetimeScope#Disposer">
            <summary>Задает stub ILifetimeScope.get_Disposer()</summary>
        </member>
        <member name="P:Autofac.Fakes.StubILifetimeScope.a::Autofac#ILifetimeScope#Tag">
            <summary>Задает stub ILifetimeScope.get_Tag()</summary>
        </member>
        <member name="T:Autofac.Fakes.StubIStartable">
            <summary>Тип заглушки Autofac.IStartable</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIStartable.#ctor">
            <summary>Инициализирует новый экземпляр type StubIStartable</summary>
        </member>
        <member name="M:Autofac.Fakes.StubIStartable.a::Autofac#IStartable#Start">
            <summary>Задает заглушка IStartable.Start()</summary>
        </member>
        <member name="F:Autofac.Fakes.StubIStartable.Start">
            <summary>Задает stub IStartable.Start()</summary>
        </member>
        <member name="T:Autofac.Fakes.StubModule">
            <summary>Тип заглушки Autofac.Module</summary>
        </member>
        <member name="M:Autofac.Fakes.StubModule.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Fakes.StubModule.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
            <summary>Задает заглушка Module.AttachToComponentRegistration(IComponentRegistry componentRegistry, IComponentRegistration registration)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubModule.AttachToComponentRegistrationIComponentRegistryIComponentRegistration">
            <summary>Задает stub Module.AttachToComponentRegistration(IComponentRegistry componentRegistry, IComponentRegistration registration)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubModule.AttachToRegistrationSource(Autofac.Core.IComponentRegistry,Autofac.Core.IRegistrationSource)">
            <summary>Задает заглушка Module.AttachToRegistrationSource(IComponentRegistry componentRegistry, IRegistrationSource registrationSource)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubModule.AttachToRegistrationSourceIComponentRegistryIRegistrationSource">
            <summary>Задает stub Module.AttachToRegistrationSource(IComponentRegistry componentRegistry, IRegistrationSource registrationSource)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubModule.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubModule</summary>
        </member>
        <member name="M:Autofac.Fakes.StubModule.Load(Autofac.ContainerBuilder)">
            <summary>Задает заглушка Module.Load(ContainerBuilder builder)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubModule.LoadContainerBuilder">
            <summary>Задает stub Module.Load(ContainerBuilder builder)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubModule.ThisAssemblyGet">
            <summary>Задает stub Module.get_ThisAssembly()</summary>
        </member>
        <member name="P:Autofac.Fakes.StubModule.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Fakes.StubModule.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Fakes.StubModule.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:Autofac.Fakes.StubModule.ThisAssembly">
            <summary>Задает stub Module.get_ThisAssembly()</summary>
        </member>
        <member name="T:Autofac.Fakes.StubNamedParameter">
            <summary>Тип заглушки Autofac.NamedParameter</summary>
        </member>
        <member name="M:Autofac.Fakes.StubNamedParameter.#ctor(System.String,System.Object)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Fakes.StubNamedParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>Задает заглушка ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubNamedParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает stub ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubNamedParameter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNamedParameter</summary>
        </member>
        <member name="P:Autofac.Fakes.StubNamedParameter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Fakes.StubNamedParameter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Fakes.StubNamedParameter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Fakes.StubPositionalParameter">
            <summary>Тип заглушки Autofac.PositionalParameter</summary>
        </member>
        <member name="M:Autofac.Fakes.StubPositionalParameter.#ctor(System.Int32,System.Object)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Fakes.StubPositionalParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>Задает заглушка ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubPositionalParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает stub ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubPositionalParameter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubPositionalParameter</summary>
        </member>
        <member name="P:Autofac.Fakes.StubPositionalParameter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Fakes.StubPositionalParameter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Fakes.StubPositionalParameter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Fakes.StubTypedParameter">
            <summary>Тип заглушки Autofac.TypedParameter</summary>
        </member>
        <member name="M:Autofac.Fakes.StubTypedParameter.#ctor(System.Type,System.Object)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Fakes.StubTypedParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>Задает заглушка ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="F:Autofac.Fakes.StubTypedParameter.CanSupplyValueParameterInfoIComponentContextFuncOfObjectOut">
            <summary>Задает stub ConstantParameter.CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1&lt;Object&gt;&amp; valueProvider)</summary>
        </member>
        <member name="M:Autofac.Fakes.StubTypedParameter.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubTypedParameter</summary>
        </member>
        <member name="P:Autofac.Fakes.StubTypedParameter.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Fakes.StubTypedParameter.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Fakes.StubTypedParameter.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator">
            <summary>Тип оболочки совместимости для Autofac.Features.GeneratedFactories.FactoryGenerator</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.#ctor(Autofac.Features.GeneratedFactories.FactoryGenerator)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.GenerateFactoryOf1IComponentContextIEnumerableOfParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>Задает оболочка совместимости FactoryGenerator.GenerateFactory(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.ConstructorTypeIComponentRegistrationParameterMapping">
            <summary>Задает оболочка совместимости FactoryGenerator.FactoryGenerator(Type delegateType, IComponentRegistration productRegistration, ParameterMapping parameterMapping)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.ConstructorTypeServiceParameterMapping">
            <summary>Задает оболочка совместимости FactoryGenerator.FactoryGenerator(Type delegateType, Service service, ParameterMapping parameterMapping)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.CreateGeneratorFuncOfExpressionExpressionArrayExpressionTypeParameterMapping">
            <summary>Задает оболочка совместимости FactoryGenerator.CreateGenerator(Func`3&lt;Expression,Expression[],Expression&gt; makeResolveCall, Type delegateType, ParameterMapping pm)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.DelegateTypeIsFuncType">
            <summary>Задает оболочка совместимости FactoryGenerator.DelegateTypeIsFunc(Type delegateType)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.GenerateFactoryIComponentContextIEnumerableOfParameter">
            <summary>Задает оболочка совместимости FactoryGenerator.GenerateFactory(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.GetParameterMappingTypeParameterMapping">
            <summary>Задает оболочка совместимости FactoryGenerator.GetParameterMapping(Type delegateType, ParameterMapping configuredParameterMapping)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.MapParametersIEnumerableOfParameterExpressionParameterMapping">
            <summary>Задает оболочка совместимости FactoryGenerator.MapParameters(IEnumerable`1&lt;ParameterExpression&gt; creatorParams, ParameterMapping pm)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator._CreateGeneratorb__8ParameterInfo">
            <summary>Задает оболочка совместимости FactoryGenerator.&lt;CreateGenerator&gt;b__8(ParameterInfo pi)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator._MapParametersb__aParameterExpression">
            <summary>Задает оболочка совместимости FactoryGenerator.&lt;MapParameters&gt;b__a(ParameterExpression p)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator._MapParametersb__bParameterExpressionInt32">
            <summary>Задает оболочка совместимости FactoryGenerator.&lt;MapParameters&gt;b__b(ParameterExpression p, Int32 i)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator._MapParametersb__cParameterExpression">
            <summary>Задает оболочка совместимости FactoryGenerator.&lt;MapParameters&gt;b__c(ParameterExpression p)</summary>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.AllInstances.GenerateFactoryOf1IComponentContextIEnumerableOfParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Autofac.Features.GeneratedFactories.FactoryGenerator,Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>Задает оболочка совместимости FactoryGenerator.GenerateFactory(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimFactoryGenerator.AllInstances.GenerateFactoryIComponentContextIEnumerableOfParameter">
            <summary>Задает оболочка совместимости FactoryGenerator.GenerateFactory(IComponentContext context, IEnumerable`1&lt;Parameter&gt; parameters)</summary>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData">
            <summary>Тип оболочки совместимости для Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.#ctor(Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.Bind(Autofac.Builder.IConcreteActivatorData)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.ActivatorGet">
            <summary>Задает оболочка совместимости GeneratedFactoryActivatorData.get_Activator()</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.ConstructorTypeService">
            <summary>Задает оболочка совместимости GeneratedFactoryActivatorData.GeneratedFactoryActivatorData(Type delegateType, Service productService)</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.ParameterMappingGet">
            <summary>Задает оболочка совместимости GeneratedFactoryActivatorData.get_ParameterMapping()</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.ParameterMappingSetParameterMapping">
            <summary>Задает оболочка совместимости GeneratedFactoryActivatorData.set_ParameterMapping(ParameterMapping value)</summary>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.AllInstances.ActivatorGet">
            <summary>Задает оболочка совместимости GeneratedFactoryActivatorData.get_Activator()</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.AllInstances.ParameterMappingGet">
            <summary>Задает оболочка совместимости GeneratedFactoryActivatorData.get_ParameterMapping()</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.ShimGeneratedFactoryActivatorData.AllInstances.ParameterMappingSetParameterMapping">
            <summary>Задает оболочка совместимости GeneratedFactoryActivatorData.set_ParameterMapping(ParameterMapping value)</summary>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.Fakes.StubFactoryGenerator">
            <summary>Тип заглушки Autofac.Features.GeneratedFactories.FactoryGenerator</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.StubFactoryGenerator.#ctor(System.Type,Autofac.Core.IComponentRegistration,Autofac.Features.GeneratedFactories.ParameterMapping)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.StubFactoryGenerator.#ctor(System.Type,Autofac.Core.Service,Autofac.Features.GeneratedFactories.ParameterMapping)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.StubFactoryGenerator.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFactoryGenerator</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.StubFactoryGenerator.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.StubFactoryGenerator.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.StubFactoryGenerator.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.Fakes.StubGeneratedFactoryActivatorData">
            <summary>Тип заглушки Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.StubGeneratedFactoryActivatorData.#ctor(System.Type,Autofac.Core.Service)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.Fakes.StubGeneratedFactoryActivatorData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubGeneratedFactoryActivatorData</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.StubGeneratedFactoryActivatorData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.StubGeneratedFactoryActivatorData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.Fakes.StubGeneratedFactoryActivatorData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.Indexed.Fakes.StubIIndex`2">
            <summary>Тип заглушки Autofac.Features.Indexed.IIndex`2</summary>
        </member>
        <member name="M:Autofac.Features.Indexed.Fakes.StubIIndex`2.#ctor">
            <summary>Инициализирует новый экземпляр type StubIIndex</summary>
        </member>
        <member name="M:Autofac.Features.Indexed.Fakes.StubIIndex`2.a::Autofac#Features#Indexed#IIndex{TKey@TValue}#TryGetValue(`0,`1@)">
            <summary>Задает заглушка IIndex`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="F:Autofac.Features.Indexed.Fakes.StubIIndex`2.ItemGetT0">
            <summary>Задает stub IIndex`2.get_Item(!0 key)</summary>
        </member>
        <member name="F:Autofac.Features.Indexed.Fakes.StubIIndex`2.TryGetValueT0T1Out">
            <summary>Задает stub IIndex`2.TryGetValue(!0 key, !1&amp; value)</summary>
        </member>
        <member name="P:Autofac.Features.Indexed.Fakes.StubIIndex`2.Autofac#Features#Indexed#IIndex{TKey@TValue}#Item(`0)">
            <summary>Задает stub IIndex`2.get_Item(!0 key)</summary>
        </member>
        <member name="T:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData">
            <summary>Тип оболочки совместимости для Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData</summary>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.#ctor(Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.AdapterGet">
            <summary>Задает оболочка совместимости LightweightAdapterActivatorData.get_Adapter()</summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.ConstructorServiceFuncOfIComponentContextIEnumerableOfParameterObjectObject">
            <summary>Задает оболочка совместимости LightweightAdapterActivatorData.LightweightAdapterActivatorData(Service fromService, Func`4&lt;IComponentContext,IEnumerable`1&lt;Parameter&gt;,Object,Object&gt; adapter)</summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.FromServiceGet">
            <summary>Задает оболочка совместимости LightweightAdapterActivatorData.get_FromService()</summary>
        </member>
        <member name="T:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.AllInstances.AdapterGet">
            <summary>Задает оболочка совместимости LightweightAdapterActivatorData.get_Adapter()</summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.Fakes.ShimLightweightAdapterActivatorData.AllInstances.FromServiceGet">
            <summary>Задает оболочка совместимости LightweightAdapterActivatorData.get_FromService()</summary>
        </member>
        <member name="T:Autofac.Features.LightweightAdapters.Fakes.StubLightweightAdapterActivatorData">
            <summary>Тип заглушки Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData</summary>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.Fakes.StubLightweightAdapterActivatorData.#ctor(Autofac.Core.Service,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object,System.Object})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.Fakes.StubLightweightAdapterActivatorData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubLightweightAdapterActivatorData</summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.Fakes.StubLightweightAdapterActivatorData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.Fakes.StubLightweightAdapterActivatorData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.Fakes.StubLightweightAdapterActivatorData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.Metadata.Fakes.ShimMeta`1">
            <summary>Тип оболочки совместимости для Autofac.Features.Metadata.Meta`1</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.ShimMeta`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.ShimMeta`1.#ctor(Autofac.Features.Metadata.Meta{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.ShimMeta`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.ShimMeta`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`1.ConstructorT0IDictionaryOfStringObject">
            <summary>Задает оболочка совместимости Meta`1.Meta`1(!0 value, IDictionary`2&lt;String,Object&gt; metadata)</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`1.MetadataGet">
            <summary>Задает оболочка совместимости Meta`1.get_Metadata()</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`1.ValueGet">
            <summary>Задает оболочка совместимости Meta`1.get_Value()</summary>
        </member>
        <member name="T:Autofac.Features.Metadata.Fakes.ShimMeta`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`1.AllInstances.MetadataGet">
            <summary>Задает оболочка совместимости Meta`1.get_Metadata()</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`1.AllInstances.ValueGet">
            <summary>Задает оболочка совместимости Meta`1.get_Value()</summary>
        </member>
        <member name="T:Autofac.Features.Metadata.Fakes.ShimMeta`2">
            <summary>Тип оболочки совместимости для Autofac.Features.Metadata.Meta`2</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.ShimMeta`2.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.ShimMeta`2.#ctor(Autofac.Features.Metadata.Meta{`0,`1})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.ShimMeta`2.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.ShimMeta`2.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`2.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`2.ConstructorT0T1">
            <summary>Задает оболочка совместимости Meta`2.Meta`2(!0 value, !1 metadata)</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`2.MetadataGet">
            <summary>Задает оболочка совместимости Meta`2.get_Metadata()</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`2.ValueGet">
            <summary>Задает оболочка совместимости Meta`2.get_Value()</summary>
        </member>
        <member name="T:Autofac.Features.Metadata.Fakes.ShimMeta`2.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`2.AllInstances.MetadataGet">
            <summary>Задает оболочка совместимости Meta`2.get_Metadata()</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.ShimMeta`2.AllInstances.ValueGet">
            <summary>Задает оболочка совместимости Meta`2.get_Value()</summary>
        </member>
        <member name="T:Autofac.Features.Metadata.Fakes.StubMeta`1">
            <summary>Тип заглушки Autofac.Features.Metadata.Meta`1</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.StubMeta`1.#ctor(`0,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.StubMeta`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMeta</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.StubMeta`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.StubMeta`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.StubMeta`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.Metadata.Fakes.StubMeta`2">
            <summary>Тип заглушки Autofac.Features.Metadata.Meta`2</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.StubMeta`2.#ctor(`0,`1)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.Metadata.Fakes.StubMeta`2.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMeta</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.StubMeta`2.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.StubMeta`2.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Fakes.StubMeta`2.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData">
            <summary>Тип оболочки совместимости для Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData</summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData.#ctor(Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData.ConstructorTypeIServiceWithType">
            <summary>Задает оболочка совместимости OpenGenericDecoratorActivatorData.OpenGenericDecoratorActivatorData(Type implementer, IServiceWithType fromService)</summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData.FromServiceGet">
            <summary>Задает оболочка совместимости OpenGenericDecoratorActivatorData.get_FromService()</summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.Fakes.ShimOpenGenericDecoratorActivatorData.AllInstances.FromServiceGet">
            <summary>Задает оболочка совместимости OpenGenericDecoratorActivatorData.get_FromService()</summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.Fakes.StubOpenGenericDecoratorActivatorData">
            <summary>Тип заглушки Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData</summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.Fakes.StubOpenGenericDecoratorActivatorData.#ctor(System.Type,Autofac.Core.IServiceWithType)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.Fakes.StubOpenGenericDecoratorActivatorData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubOpenGenericDecoratorActivatorData</summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.Fakes.StubOpenGenericDecoratorActivatorData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.Fakes.StubOpenGenericDecoratorActivatorData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.Fakes.StubOpenGenericDecoratorActivatorData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1">
            <summary>Тип оболочки совместимости для Autofac.Features.OwnedInstances.Owned`1</summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.#ctor(Autofac.Features.OwnedInstances.Owned{`0})">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.ConstructorT0IDisposable">
            <summary>Задает оболочка совместимости Owned`1.Owned`1(!0 value, IDisposable lifetime)</summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.DisposeBoolean">
            <summary>Задает оболочка совместимости Owned`1.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.ValueGet">
            <summary>Задает оболочка совместимости Owned`1.get_Value()</summary>
        </member>
        <member name="T:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.AllInstances.DisposeBoolean">
            <summary>Задает оболочка совместимости Owned`1.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Fakes.ShimOwned`1.AllInstances.ValueGet">
            <summary>Задает оболочка совместимости Owned`1.get_Value()</summary>
        </member>
        <member name="T:Autofac.Features.OwnedInstances.Fakes.StubOwned`1">
            <summary>Тип заглушки Autofac.Features.OwnedInstances.Owned`1</summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Fakes.StubOwned`1.#ctor(`0,System.IDisposable)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Fakes.StubOwned`1.Dispose(System.Boolean)">
            <summary>Задает заглушка Owned`1.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Autofac.Features.OwnedInstances.Fakes.StubOwned`1.DisposeBoolean">
            <summary>Задает stub Owned`1.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Fakes.StubOwned`1.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubOwned</summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Fakes.StubOwned`1.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Fakes.StubOwned`1.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Fakes.StubOwned`1.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource">
            <summary>Тип оболочки совместимости для Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.#ctor(Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.Bind(Autofac.Core.IRegistrationSource)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.Constructor">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.AnyConcreteTypeNotAlreadyRegisteredSource()</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.ConstructorFuncOfTypeBoolean">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.AnyConcreteTypeNotAlreadyRegisteredSource(Func`2&lt;Type,Boolean&gt; predicate)</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.IsAdapterForIndividualComponentsGet">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.get_IsAdapterForIndividualComponents()</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.RegistrationConfigurationGet">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.get_RegistrationConfiguration()</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.RegistrationConfigurationSetActionOfIRegistrationBuilderOfObjectConcreteReflectionActivatorDataSingleRegistrationStyle">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.set_RegistrationConfiguration(Action`1&lt;IRegistrationBuilder`3&lt;Object,ConcreteReflectionActivatorData,SingleRegistrationStyle&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.RegistrationsForServiceFuncOfServiceIEnumerableOfIComponentRegistration">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.RegistrationsFor(Service service, Func`2&lt;Service,IEnumerable`1&lt;IComponentRegistration&gt;&gt; registrationAccessor)</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.ToString">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.ToString()</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource._ctorb__0Type">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.&lt;.ctor&gt;b__0(Type t)</summary>
        </member>
        <member name="T:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.AllInstances.IsAdapterForIndividualComponentsGet">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.get_IsAdapterForIndividualComponents()</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.AllInstances.RegistrationConfigurationGet">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.get_RegistrationConfiguration()</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.AllInstances.RegistrationConfigurationSetActionOfIRegistrationBuilderOfObjectConcreteReflectionActivatorDataSingleRegistrationStyle">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.set_RegistrationConfiguration(Action`1&lt;IRegistrationBuilder`3&lt;Object,ConcreteReflectionActivatorData,SingleRegistrationStyle&gt;&gt; value)</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.AllInstances.RegistrationsForServiceFuncOfServiceIEnumerableOfIComponentRegistration">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.RegistrationsFor(Service service, Func`2&lt;Service,IEnumerable`1&lt;IComponentRegistration&gt;&gt; registrationAccessor)</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSource.AllInstances.ToString01">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSource.ToString()</summary>
        </member>
        <member name="T:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSourceExtensions">
            <summary>Тип оболочки совместимости для Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceExtensions</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSourceExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSourceExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSourceExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSourceExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.ShimAnyConcreteTypeNotAlreadyRegisteredSourceExtensions.WithRegistrationsAsAnyConcreteTypeNotAlreadyRegisteredSourceActionOfIRegistrationBuilderOfObjectConcreteReflectionActivatorDataSingleRegistrationStyle">
            <summary>Задает оболочка совместимости AnyConcreteTypeNotAlreadyRegisteredSourceExtensions.WithRegistrationsAs(AnyConcreteTypeNotAlreadyRegisteredSource source, Action`1&lt;IRegistrationBuilder`3&lt;Object,ConcreteReflectionActivatorData,SingleRegistrationStyle&gt;&gt; configurationAction)</summary>
        </member>
        <member name="T:Autofac.Features.ResolveAnything.Fakes.StubAnyConcreteTypeNotAlreadyRegisteredSource">
            <summary>Тип заглушки Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.StubAnyConcreteTypeNotAlreadyRegisteredSource.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.StubAnyConcreteTypeNotAlreadyRegisteredSource.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.StubAnyConcreteTypeNotAlreadyRegisteredSource.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAnyConcreteTypeNotAlreadyRegisteredSource</summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.Fakes.StubAnyConcreteTypeNotAlreadyRegisteredSource.ToString">
            <summary>Задает заглушка AnyConcreteTypeNotAlreadyRegisteredSource.ToString()</summary>
        </member>
        <member name="F:Autofac.Features.ResolveAnything.Fakes.StubAnyConcreteTypeNotAlreadyRegisteredSource.ToString01">
            <summary>Задает stub AnyConcreteTypeNotAlreadyRegisteredSource.ToString()</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.StubAnyConcreteTypeNotAlreadyRegisteredSource.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.StubAnyConcreteTypeNotAlreadyRegisteredSource.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.Fakes.StubAnyConcreteTypeNotAlreadyRegisteredSource.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData">
            <summary>Тип оболочки совместимости для Autofac.Features.Scanning.ScanningActivatorData</summary>
        </member>
        <member name="M:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.#ctor(Autofac.Features.Scanning.ScanningActivatorData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.ConfigurationActionsGet">
            <summary>Задает оболочка совместимости ScanningActivatorData.get_ConfigurationActions()</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.Constructor">
            <summary>Задает оболочка совместимости ScanningActivatorData.ScanningActivatorData()</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.FiltersGet">
            <summary>Задает оболочка совместимости ScanningActivatorData.get_Filters()</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.PostScanningCallbacksGet">
            <summary>Задает оболочка совместимости ScanningActivatorData.get_PostScanningCallbacks()</summary>
        </member>
        <member name="T:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.AllInstances.ConfigurationActionsGet">
            <summary>Задает оболочка совместимости ScanningActivatorData.get_ConfigurationActions()</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.AllInstances.FiltersGet">
            <summary>Задает оболочка совместимости ScanningActivatorData.get_Filters()</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.ShimScanningActivatorData.AllInstances.PostScanningCallbacksGet">
            <summary>Задает оболочка совместимости ScanningActivatorData.get_PostScanningCallbacks()</summary>
        </member>
        <member name="T:Autofac.Features.Scanning.Fakes.StubScanningActivatorData">
            <summary>Тип заглушки Autofac.Features.Scanning.ScanningActivatorData</summary>
        </member>
        <member name="M:Autofac.Features.Scanning.Fakes.StubScanningActivatorData.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.Scanning.Fakes.StubScanningActivatorData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubScanningActivatorData</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.StubScanningActivatorData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.StubScanningActivatorData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.Scanning.Fakes.StubScanningActivatorData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource">
            <summary>Тип оболочки совместимости для Autofac.Features.Variance.ContravariantRegistrationSource</summary>
        </member>
        <member name="M:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.#ctor(Autofac.Features.Variance.ContravariantRegistrationSource)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.Bind(Autofac.Core.IRegistrationSource)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.Constructor">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.ContravariantRegistrationSource()</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.GetBagOfTypesAssignableFromType">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.GetBagOfTypesAssignableFrom(Type type)</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.GetTypesAssignableFromType">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.GetTypesAssignableFrom(Type type)</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.IsAdapterForIndividualComponentsGet">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.get_IsAdapterForIndividualComponents()</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.IsCompatibleInterfaceTypeTypeInt32Out">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.IsCompatibleInterfaceType(Type type, Int32&amp; contravariantParameterIndex)</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.RegistrationsForServiceFuncOfServiceIEnumerableOfIComponentRegistration">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.RegistrationsFor(Service service, Func`2&lt;Service,IEnumerable`1&lt;IComponentRegistration&gt;&gt; registrationAccessor)</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.SubstituteArrayElementAtTypeArrayTypeInt32">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.SubstituteArrayElementAt(Type[] array, Type newElement, Int32 index)</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource._RegistrationsForb__4IComponentRegistration">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.&lt;RegistrationsFor&gt;b__4(IComponentRegistration r)</summary>
        </member>
        <member name="T:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.AllInstances.IsAdapterForIndividualComponentsGet">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.get_IsAdapterForIndividualComponents()</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.ShimContravariantRegistrationSource.AllInstances.RegistrationsForServiceFuncOfServiceIEnumerableOfIComponentRegistration">
            <summary>Задает оболочка совместимости ContravariantRegistrationSource.RegistrationsFor(Service service, Func`2&lt;Service,IEnumerable`1&lt;IComponentRegistration&gt;&gt; registrationAccessor)</summary>
        </member>
        <member name="T:Autofac.Features.Variance.Fakes.StubContravariantRegistrationSource">
            <summary>Тип заглушки Autofac.Features.Variance.ContravariantRegistrationSource</summary>
        </member>
        <member name="M:Autofac.Features.Variance.Fakes.StubContravariantRegistrationSource.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Features.Variance.Fakes.StubContravariantRegistrationSource.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubContravariantRegistrationSource</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.StubContravariantRegistrationSource.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.StubContravariantRegistrationSource.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Features.Variance.Fakes.StubContravariantRegistrationSource.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Autofac.Util.Fakes.ShimAssemblyExtensions">
            <summary>Тип оболочки совместимости для Autofac.Util.AssemblyExtensions</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.ShimAssemblyExtensions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.ShimAssemblyExtensions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.ShimAssemblyExtensions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimAssemblyExtensions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimAssemblyExtensions.GetLoadableTypesAssembly">
            <summary>Задает оболочка совместимости AssemblyExtensions.GetLoadableTypes(Assembly assembly)</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimAssemblyExtensions._GetLoadableTypesb__0Type">
            <summary>Задает оболочка совместимости AssemblyExtensions.&lt;GetLoadableTypes&gt;b__0(Type t)</summary>
        </member>
        <member name="T:Autofac.Util.Fakes.ShimDisposable">
            <summary>Тип оболочки совместимости для Autofac.Util.Disposable</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.ShimDisposable.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.ShimDisposable.#ctor(Autofac.Util.Disposable)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.ShimDisposable.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.ShimDisposable.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.ShimDisposable.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimDisposable.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimDisposable.Constructor">
            <summary>Задает оболочка совместимости Disposable.Disposable()</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimDisposable.Dispose">
            <summary>Задает оболочка совместимости Disposable.Dispose()</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimDisposable.DisposeBoolean">
            <summary>Задает оболочка совместимости Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimDisposable.IsDisposedGet">
            <summary>Задает оболочка совместимости Disposable.get_IsDisposed()</summary>
        </member>
        <member name="T:Autofac.Util.Fakes.ShimDisposable.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimDisposable.AllInstances.Dispose">
            <summary>Задает оболочка совместимости Disposable.Dispose()</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimDisposable.AllInstances.DisposeBoolean">
            <summary>Задает оболочка совместимости Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.ShimDisposable.AllInstances.IsDisposedGet">
            <summary>Задает оболочка совместимости Disposable.get_IsDisposed()</summary>
        </member>
        <member name="T:Autofac.Util.Fakes.StubDisposable">
            <summary>Тип заглушки Autofac.Util.Disposable</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.StubDisposable.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.StubDisposable.Dispose(System.Boolean)">
            <summary>Задает заглушка Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Autofac.Util.Fakes.StubDisposable.DisposeBoolean">
            <summary>Задает stub Disposable.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Autofac.Util.Fakes.StubDisposable.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDisposable</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.StubDisposable.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.StubDisposable.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Autofac.Util.Fakes.StubDisposable.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
    </members>
</doc>
